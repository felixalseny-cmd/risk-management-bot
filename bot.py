import os
import logging
import asyncio
import re
import time
import functools
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from pymongo import MongoClient
from flask import Flask
import threading
import requests
import schedule

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# Conversation states
(
    MAIN_MENU, INSTRUMENT_TYPE, CUSTOM_INSTRUMENT, DIRECTION, 
    RISK_PERCENT, DEPOSIT, LEVERAGE, CURRENCY, ENTRY, 
    STOP_LOSS, TAKE_PROFITS, VOLUME_DISTRIBUTION,
    PORTFOLIO_MENU, ANALYTICS_MENU, TRADE_HISTORY, PERFORMANCE_ANALYSIS
) = range(16)

# Temporary storage
user_data: Dict[int, Dict[str, Any]] = {}

# MongoDB Connection
MONGO_URI = os.getenv('MONGODB_URI', 'mongodb+srv://felixalseny_db_user:kontraktaciA22@felix22.3nx1ibi.mongodb.net/risk_bot_pro?retryWrites=true&w=majority&appName=Felix22')
mongo_client = None
db = None
users_collection = None
portfolio_collection = None

try:
    mongo_client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    mongo_client.server_info()  # Test connection
    db = mongo_client.risk_bot_pro
    users_collection = db.users
    portfolio_collection = db.portfolios
    logger.info("‚úÖ MongoDB connected successfully!")
except Exception as e:
    logger.error(f"‚ùå MongoDB connection failed: {e}")
    users_collection = None
    portfolio_collection = None

class MongoDBManager:
    @staticmethod
    def get_user_data(user_id: int) -> Dict[str, Any]:
        """Get user data from MongoDB"""
        if users_collection is None:
            return {}
        try:
            user_data = users_collection.find_one({"user_id": user_id})
            return user_data.get('data', {}) if user_data else {}
        except Exception as e:
            logger.error(f"Error getting user data: {e}")
            return {}

    @staticmethod
    def update_user_data(user_id: int, data: Dict[str, Any]):
        """Update user data in MongoDB"""
        if users_collection is None:
            return
        try:
            users_collection.update_one(
                {"user_id": user_id},
                {"$set": {"data": data, "last_updated": datetime.now()}},
                upsert=True
            )
        except Exception as e:
            logger.error(f"Error updating user data: {e}")

    @staticmethod
    def get_portfolio(user_id: int) -> Dict[str, Any]:
        """Get portfolio from MongoDB"""
        if portfolio_collection is None:
            return {}
        try:
            portfolio = portfolio_collection.find_one({"user_id": user_id})
            return portfolio.get('portfolio_data', {}) if portfolio else {}
        except Exception as e:
            logger.error(f"Error getting portfolio: {e}")
            return {}

    @staticmethod
    def update_portfolio(user_id: int, portfolio_data: Dict[str, Any]):
        """Update portfolio in MongoDB"""
        if portfolio_collection is None:
            return
        try:
            portfolio_collection.update_one(
                {"user_id": user_id},
                {"$set": {"portfolio_data": portfolio_data, "last_updated": datetime.now()}},
                upsert=True
            )
        except Exception as e:
            logger.error(f"Error updating portfolio: {e}")

# Portfolio Data Management
class PortfolioManager:
    @staticmethod
    def initialize_user_portfolio(user_id: int):
        portfolio_data = MongoDBManager.get_portfolio(user_id)
        
        if not portfolio_data:
            portfolio_data = {
                'initial_balance': 10000,
                'current_balance': 10000,
                'trades': [],
                'performance': {
                    'total_trades': 0,
                    'winning_trades': 0,
                    'losing_trades': 0,
                    'total_profit': 0,
                    'total_loss': 0,
                    'win_rate': 0,
                    'average_profit': 0,
                    'average_loss': 0
                },
                'allocation': {},
                'history': []
            }
            MongoDBManager.update_portfolio(user_id, portfolio_data)
        
        return portfolio_data

    @staticmethod
    def add_trade(user_id: int, trade_data: Dict):
        portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
        
        trade_id = len(portfolio_data['trades']) + 1
        trade_data['id'] = trade_id
        trade_data['timestamp'] = datetime.now().isoformat()
        
        portfolio_data['trades'].append(trade_data)
        
        # Update performance metrics
        PortfolioManager.update_performance_metrics(user_id, portfolio_data)
        
        # Update allocation
        instrument = trade_data.get('instrument', 'Unknown')
        if instrument not in portfolio_data['allocation']:
            portfolio_data['allocation'][instrument] = 0
        portfolio_data['allocation'][instrument] += 1
        
        # Add to history
        portfolio_data['history'].append({
            'type': 'trade',
            'action': 'open' if trade_data.get('status') == 'open' else 'close',
            'instrument': instrument,
            'profit': trade_data.get('profit', 0),
            'timestamp': trade_data['timestamp']
        })
        
        MongoDBManager.update_portfolio(user_id, portfolio_data)

    @staticmethod
    def update_performance_metrics(user_id: int, portfolio_data: Dict):
        trades = portfolio_data['trades']
        
        if not trades:
            return
        
        closed_trades = [t for t in trades if t.get('status') == 'closed']
        winning_trades = [t for t in closed_trades if t.get('profit', 0) > 0]
        losing_trades = [t for t in closed_trades if t.get('profit', 0) <= 0]
        
        portfolio_data['performance']['total_trades'] = len(closed_trades)
        portfolio_data['performance']['winning_trades'] = len(winning_trades)
        portfolio_data['performance']['losing_trades'] = len(losing_trades)
        portfolio_data['performance']['total_profit'] = sum(t.get('profit', 0) for t in winning_trades)
        portfolio_data['performance']['total_loss'] = sum(t.get('profit', 0) for t in losing_trades)
        
        if closed_trades:
            portfolio_data['performance']['win_rate'] = (len(winning_trades) / len(closed_trades)) * 100
            portfolio_data['performance']['average_profit'] = (
                portfolio_data['performance']['total_profit'] / len(winning_trades) 
                if winning_trades else 0
            )
            portfolio_data['performance']['average_loss'] = (
                portfolio_data['performance']['total_loss'] / len(losing_trades) 
                if losing_trades else 0
            )
        
        MongoDBManager.update_portfolio(user_id, portfolio_data)

# Flask server for health checks
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ PRO Risk Management Bot is ALIVE and RUNNING!"

@app.route('/health')
def health():
    try:
        # Test MongoDB connection
        mongo_ok = False
        if users_collection is not None:
            users_collection.find_one({})
            mongo_ok = True
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "services": {
                "mongodb": "connected" if mongo_ok else "disconnected",
                "telegram_bot": "running"
            }
        }
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}, 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint for Telegram"""
    return "OK", 200

def run_flask():
    port = int(os.environ.get('FLASK_PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

# Start Flask in background
flask_thread = threading.Thread(target=run_flask, daemon=True)
flask_thread.start()
logger.info("‚úÖ Flask health check server started!")

# Keep-alive to prevent Render sleep
def keep_alive():
    try:
        bot_url = os.getenv('RENDER_EXTERNAL_URL', 'https://risk-management-bot-pro.onrender.com')
        if bot_url:
            response = requests.get(f"{bot_url}/health", timeout=10)
            if response.status_code == 200:
                logger.info("‚úÖ Keep-alive ping successful")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Keep-alive failed: {e}")

schedule.every(5).minutes.do(keep_alive)

def schedule_runner():
    while True:
        schedule.run_pending()
        time.sleep(60)

schedule_thread = threading.Thread(target=schedule_runner, daemon=True)
schedule_thread.start()
logger.info("‚úÖ Keep-alive scheduler started!")

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@log_performance
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Main menu"""
    if update.message:
        user = update.message.from_user
    elif update.callback_query:
        user = update.callback_query.from_user
    else:
        return ConversationHandler.END
        
    user_name = user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
    
    welcome_text = f"""
üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*

üéØ *PRO –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –†–∏—Å–∫-–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ v3.0*

‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:*
"""
    
    user_id = user.id
    
    # Get user data from MongoDB
    user_data_dict = MongoDBManager.get_user_data(user_id)
    old_presets = user_data_dict.get('presets', [])
    
    # Update user data in MongoDB
    updated_data = {
        'start_time': datetime.now().isoformat(),
        'last_activity': time.time(),
        'presets': old_presets,
        'username': user.username,
        'first_name': user.first_name
    }
    MongoDBManager.update_user_data(user_id, updated_data)
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_calculation")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="quick_calculation")],
        [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
        [InlineKeyboardButton("üìö PRO –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="pro_info")]
    ]
    
    if update.message:
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.edit_message_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return MAIN_MENU

@log_performance
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle main menu callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "pro_calculation":
        return await start_pro_calculation(update, context)
    elif data == "quick_calculation":
        return await start_quick_calculation(update, context)
    elif data == "portfolio":
        return await show_portfolio_menu(update, context)
    elif data == "analytics":
        return await show_analytics_menu(update, context)
    elif data == "pro_info":
        return await show_pro_info(update, context)
    elif data == "main_menu":
        return await start(update, context)
    
    return MAIN_MENU

@log_performance
async def start_pro_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start professional calculation"""
    keyboard = []
    for key, value in INSTRUMENT_TYPES.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=f"inst_type_{key}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await update.callback_query.edit_message_text(
        "üìä *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return INSTRUMENT_TYPE

@log_performance
async def start_quick_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start quick calculation"""
    # For now, we'll use the same as pro calculation but with default parameters
    # In a real bot, you might simplify the steps
    await update.callback_query.edit_message_text(
        "‚ö° *–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç*\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
        parse_mode='Markdown'
    )
    return MAIN_MENU

@log_performance
async def show_portfolio_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show portfolio menu"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    performance = portfolio_data['performance']
    
    text = f"""
üíº *–ú–æ–π –ü–æ—Ä—Ç—Ñ–µ–ª—å*

*–ë–∞–ª–∞–Ω—Å:* ${portfolio_data['current_balance']:,.2f}
*–°–¥–µ–ª–æ–∫:* {performance['total_trades']}
*–í–∏–Ω—Ä–µ–π—Ç:* {performance['win_rate']:.1f}%
*–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç:* ${performance['total_profit']:,.2f}
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="portfolio_trades")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="portfolio_balance")],
        [InlineKeyboardButton("üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="portfolio_performance")],
        [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="portfolio_history")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç", callback_data="portfolio_deposit")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PORTFOLIO_MENU

@log_performance
async def show_analytics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show analytics menu"""
    text = """
üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –û—Ç—á–µ—Ç—ã*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º —Å–¥–µ–ª–∫–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
"""
    
    keyboard = [
        [InlineKeyboardButton("‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", callback_data="analytics_risk_reward")],
        [InlineKeyboardButton("üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="analytics_strategy_perf")],
        [InlineKeyboardButton("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫", callback_data="analytics_trade_stats")],
        [InlineKeyboardButton("üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤", callback_data="analytics_optimization")],
        [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="analytics_recommendations")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ANALYTICS_MENU

@log_performance
async def show_pro_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show PRO instructions"""
    text = """
üìö *PRO –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏*

*üéØ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –†–∏—Å–∫-–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ v3.0*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞, –ø–ª–µ—á–∞, –æ–±—ä–µ–º–∞
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (Forex, –ö—Ä–∏–ø—Ç–æ, –ò–Ω–¥–µ–∫—Å—ã –∏ —Ç.–¥.)
2. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–∏—Å–∫, –¥–µ–ø–æ–∑–∏—Ç, –ø–ª–µ—á–æ
3. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã: –≤—Ö–æ–¥, —Å—Ç–æ–ø-–ª–æ—Å—Å, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±—ä–µ–º –º–µ–∂–¥—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏
5. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫–∞–º:*
‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: –º–∏–Ω–∏–º—É–º 1:2
‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å
"""
    
    keyboard = [
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MAIN_MENU

@log_performance
async def quick_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /quick command"""
    return await start(update, context)

@log_performance
async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /portfolio command"""
    return await show_portfolio_menu(update, context)

@log_performance
async def analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /analytics command"""
    return await show_analytics_menu(update, context)

@log_performance
async def pro_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /info command"""
    return await show_pro_info(update, context)

@log_performance
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel conversation"""
    if update.message:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    
    return ConversationHandler.END

# === PORTFOLIO HANDLERS ===

@log_performance
async def portfolio_trades(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show portfolio trades"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    trades = portfolio_data['trades']
    
    if not trades:
        text = "üìä *–ú–æ–∏ –°–¥–µ–ª–∫–∏*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫."
    else:
        text = "üìä *–ú–æ–∏ –°–¥–µ–ª–∫–∏*\n\n"
        for trade in trades[-10:]:  # Show last 10 trades
            status = "üü¢ –û—Ç–∫—Ä—ã—Ç–∞" if trade.get('status') == 'open' else "üî¥ –ó–∞–∫—Ä—ã—Ç–∞"
            profit = trade.get('profit', 0)
            profit_text = f"+${profit:.2f}" if profit > 0 else f"-${abs(profit):.2f}"
            text += f"‚Ä¢ {trade.get('instrument', 'Unknown')} - {status} - {profit_text}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="portfolio")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PORTFOLIO_MENU

@log_performance
async def portfolio_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show portfolio balance"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    text = f"""
üí∞ *–ë–∞–ª–∞–Ω—Å –ü–æ—Ä—Ç—Ñ–µ–ª—è*

*–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:* ${portfolio_data['initial_balance']:,.2f}
*–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${portfolio_data['current_balance']:,.2f}
*–û–±—â–∏–π PnL:* ${portfolio_data['current_balance'] - portfolio_data['initial_balance']:,.2f}
*ROI:* {((portfolio_data['current_balance'] / portfolio_data['initial_balance'] - 1) * 100):.2f}%
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="portfolio")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PORTFOLIO_MENU

@log_performance
async def portfolio_performance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show portfolio performance"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    perf = portfolio_data['performance']
    
    text = f"""
üìà *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*

*–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* {perf['total_trades']}
*–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö:* {perf['winning_trades']}
*–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö:* {perf['losing_trades']}
*–í–∏–Ω—Ä–µ–π—Ç:* {perf['win_rate']:.1f}%
*–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç:* ${perf['average_profit']:.2f}
*–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫:* ${perf['average_loss']:.2f}
*–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç:* ${perf['total_profit']:.2f}
*–û–±—â–∏–π —É–±—ã—Ç–æ–∫:* ${perf['total_loss']:.2f}
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="portfolio")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PORTFOLIO_MENU

@log_performance
async def portfolio_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show portfolio history"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    history = portfolio_data['history']
    
    if not history:
        text = "üìã *–ò—Å—Ç–æ—Ä–∏—è*\n\n–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞."
    else:
        text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –û–ø–µ—Ä–∞—Ü–∏–π*\n\n"
        for event in history[-10:]:  # Show last 10 events
            if event['type'] == 'trade':
                action = "üìà –û—Ç–∫—Ä—ã—Ç–∞" if event['action'] == 'open' else "üìâ –ó–∞–∫—Ä—ã—Ç–∞"
                profit_text = f" | PnL: ${event['profit']:.2f}" if event.get('profit') else ""
                text += f"‚Ä¢ {action} {event['instrument']}{profit_text}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", callback_data="portfolio")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PORTFOLIO_MENU

@log_performance
async def portfolio_add_trade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Add trade to portfolio"""
    # This would typically open a conversation to add trade details
    # For now, we'll add a sample trade
    user_id = update.callback_query.from_user.id
    
    sample_trade = {
        'instrument': 'EURUSD',
        'direction': 'BUY',
        'entry_price': 1.0850,
        'exit_price': 1.0900,
        'volume': 0.1,
        'profit': 50.0,
        'status': 'closed',
        'risk_percent': 2.0
    }
    
    PortfolioManager.add_trade(user_id, sample_trade)
    
    await update.callback_query.edit_message_text(
        "‚úÖ *–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n–ü—Ä–∏–º–µ—Ä —Å–¥–µ–ª–∫–∏ EURUSD –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å.",
        parse_mode='Markdown'
    )
    return await show_portfolio_menu(update, context)

@log_performance
async def portfolio_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle portfolio deposit"""
    # This would typically open a conversation to add deposit
    # For now, we'll show a message
    await update.callback_query.edit_message_text(
        "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –î–µ–ø–æ–∑–∏—Ç–∞*\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.",
        parse_mode='Markdown'
    )
    return PORTFOLIO_MENU

@log_performance
async def portfolio_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Back to portfolio menu"""
    return await show_portfolio_menu(update, context)

# === ANALYTICS HANDLERS ===

@log_performance
async def analytics_risk_reward(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show risk/reward analysis"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    trades = portfolio_data['trades']
    analysis = AnalyticsEngine.calculate_risk_reward_analysis(trades)
    
    text = f"""
‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ –†–∏—Å–∫/–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ*

*–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R/R:* {analysis['average_risk_reward']:.2f}:1
*–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:* ${analysis['best_trade']:.2f}
*–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:* ${analysis['worst_trade']:.2f}
*–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:* {analysis['consistency_score']:.1f}%
*–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:* {analysis['risk_score']:.1f}/100

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R/R: 1:3
‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1-2%
‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ANALYTICS_MENU

@log_performance
async def analytics_strategy_perf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show strategy performance"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    perf = portfolio_data['performance']
    allocation = portfolio_data.get('allocation', {})
    
    text = f"""
üìä *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –°—Ç—Ä–∞—Ç–µ–≥–∏–∏*

*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {perf['win_rate']:.1f}%
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {perf['total_trades']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: ${perf['average_profit']:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${perf['average_loss']:.2f}

*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:*
"""
    
    for instrument, count in list(allocation.items())[:5]:  # Show top 5
        text += f"‚Ä¢ {instrument}: {count} —Å–¥–µ–ª–æ–∫\n"
    
    if perf['win_rate'] > 60:
        rating = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è (–û—Ç–ª–∏—á–Ω–æ)"
    elif perf['win_rate'] > 50:
        rating = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è (–•–æ—Ä–æ—à–æ)"
    elif perf['win_rate'] > 40:
        rating = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
    else:
        rating = "‚≠êÔ∏è‚≠êÔ∏è (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)"
    
    text += f"\n*–û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:* {rating}"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ANALYTICS_MENU

@log_performance
async def analytics_trade_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show trade statistics"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    trades = portfolio_data['trades']
    closed_trades = [t for t in trades if t.get('status') == 'closed']
    
    if not closed_trades:
        text = "üìâ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–¥–µ–ª–æ–∫*\n\n–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    else:
        profits = [t.get('profit', 0) for t in closed_trades]
        total_profit = sum(profits)
        avg_profit = total_profit / len(profits)
        max_profit = max(profits)
        max_loss = min(profits)
        
        text = f"""
üìâ *–î–µ—Ç–∞–ª—å–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–¥–µ–ª–æ–∫*

*–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(closed_trades)}
‚Ä¢ –û–±—â–∏–π PnL: ${total_profit:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${avg_profit:.2f}
‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç: ${max_profit:.2f}
‚Ä¢ –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: ${max_loss:.2f}

*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:*
‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç–Ω—ã—Ö: {len([p for p in profits if p > 0])}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {len([p for p in profits if p <= 0])}
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ANALYTICS_MENU

@log_performance
async def analytics_optimization(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show risk optimization suggestions"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    trades = portfolio_data['trades']
    closed_trades = [t for t in trades if t.get('status') == 'closed']
    
    text = """
üîç *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –†–∏—Å–∫–æ–≤*

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:*

1. *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*
   ‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
   ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R/R: –º–∏–Ω–∏–º—É–º 1:2
   ‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏

2. *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞:*
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–ª–∞–Ω—É
   ‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

3. *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º:*
   ‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
   ‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   ‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
"""
    
    if closed_trades:
        risk_levels = [t.get('risk_percent', 0) for t in closed_trades]
        avg_risk = sum(risk_levels) / len(risk_levels) if risk_levels else 0
        
        if avg_risk > 3:
            text += f"\n*–í–Ω–∏–º–∞–Ω–∏–µ!* –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ ({avg_risk:.1f}%) —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –¥–æ 1-2%."
        elif avg_risk < 0.5:
            text += f"\n*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!* –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ ({avg_risk:.1f}%) –Ω–∏–∑–∫–∏–π. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 1-2%."
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ANALYTICS_MENU

@log_performance
async def analytics_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show personalized recommendations"""
    user_id = update.callback_query.from_user.id
    portfolio_data = PortfolioManager.initialize_user_portfolio(user_id)
    
    recommendations = AnalyticsEngine.generate_strategy_recommendations(portfolio_data)
    
    text = """
üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*

*–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:*
"""
    
    for i, rec in enumerate(recommendations, 1):
        text += f"{i}. {rec}\n"
    
    text += "\n*–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:*"
    text += """
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –∏ —É—Å–ø–µ—Ö–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics")]]
    await update.callback_query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ANALYTICS_MENU

@log_performance
async def analytics_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Back to analytics menu"""
    return await show_analytics_menu(update, context)

# === CALCULATION PROCESS HANDLERS ===

@log_performance
async def process_instrument_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process instrument type selection"""
    query = update.callback_query
    await query.answer()
    
    instrument_type = query.data.replace('inst_type_', '')
    context.user_data['instrument_type'] = instrument_type
    
    # Get presets for this instrument type
    presets = INSTRUMENT_PRESETS.get(instrument_type, [])
    
    keyboard = []
    for preset in presets:
        keyboard.append([InlineKeyboardButton(preset, callback_data=f"currency_{preset}")])
    
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="custom_currency")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_instrument")])
    
    await query.edit_message_text(
        f"üìä *{INSTRUMENT_TYPES[instrument_type]}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CURRENCY

@log_performance
async def process_currency_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process currency selection from presets"""
    query = update.callback_query
    await query.answer()
    
    currency_pair = query.data.replace('currency_', '')
    context.user_data['currency_pair'] = currency_pair
    
    keyboard = []
    for direction in TRADE_DIRECTIONS:
        keyboard.append([InlineKeyboardButton(direction, callback_data=f"direction_{direction}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_instrument")])
    
    await query.edit_message_text(
        f"üí± *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {currency_pair}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return DIRECTION

@log_performance
async def process_custom_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process custom currency input request"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üí± *–í–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: EURUSD, BTCUSD, GOLD):",
        parse_mode='Markdown'
    )
    return CUSTOM_INSTRUMENT

@log_performance
async def process_currency_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process custom currency input"""
    currency_pair = update.message.text.upper().strip()
    context.user_data['currency_pair'] = currency_pair
    
    keyboard = []
    for direction in TRADE_DIRECTIONS:
        keyboard.append([InlineKeyboardButton(direction, callback_data=f"direction_{direction}")])
    
    await update.message.reply_text(
        f"üí± *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {currency_pair}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return DIRECTION

@log_performance
async def back_to_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Go back to instrument selection"""
    return await start_pro_calculation(update, context)

@log_performance
async def process_direction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process trade direction"""
    query = update.callback_query
    await query.answer()
    
    direction = query.data.replace('direction_', '')
    context.user_data['direction'] = direction
    
    keyboard = []
    for risk_level in RISK_LEVELS:
        keyboard.append([InlineKeyboardButton(risk_level, callback_data=f"risk_{risk_level}")])
    
    await query.edit_message_text(
        f"üìä *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞):",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return RISK_PERCENT

@log_performance
async def process_risk_percent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process risk percentage"""
    query = update.callback_query
    await query.answer()
    
    risk_percent = float(query.data.replace('risk_', '').replace('%', '')) / 100
    context.user_data['risk_percent'] = risk_percent
    
    await query.edit_message_text(
        f"‚ö° *–†–∏—Å–∫:* {risk_percent*100}%\n\n"
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ (–≤ USD):\n\n"
        "–ü—Ä–∏–º–µ—Ä: 1000",
        parse_mode='Markdown'
    )
    return DEPOSIT

@log_performance
async def process_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process deposit amount"""
    try:
        deposit = float(update.message.text.replace(',', '.'))
        if deposit <= 0:
            await update.message.reply_text("‚ùå –î–µ–ø–æ–∑–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return DEPOSIT
        
        context.user_data['deposit'] = deposit
        
        keyboard = []
        for leverage in LEVERAGES:
            keyboard.append([InlineKeyboardButton(leverage, callback_data=f"leverage_{leverage}")])
        
        await update.message.reply_text(
            f"üí∞ *–î–µ–ø–æ–∑–∏—Ç:* ${deposit:,.2f}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return LEVERAGE
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:")
        return DEPOSIT

@log_performance
async def process_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process leverage selection"""
    query = update.callback_query
    await query.answer()
    
    leverage = query.data.replace('leverage_', '')
    context.user_data['leverage'] = leverage
    
    await query.edit_message_text(
        f"üìà *–ü–ª–µ—á–æ:* {leverage}\n\n"
        "üíπ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: 1.0850",
        parse_mode='Markdown'
    )
    return ENTRY

@log_performance
async def process_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process entry price"""
    try:
        entry_price = float(update.message.text.replace(',', '.'))
        if entry_price <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return ENTRY
        
        context.user_data['entry_price'] = entry_price
        
        await update.message.reply_text(
            f"üéØ *–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:* {entry_price}\n\n"
            "üõë –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1.0800",
            parse_mode='Markdown'
        )
        return STOP_LOSS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞:")
        return ENTRY

@log_performance
async def process_stop_loss(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process stop loss price"""
    try:
        stop_loss = float(update.message.text.replace(',', '.'))
        entry_price = context.user_data.get('entry_price', 0)
        
        if stop_loss <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return STOP_LOSS
        
        direction = context.user_data.get('direction', 'BUY')
        if direction == 'BUY' and stop_loss >= entry_price:
            await update.message.reply_text("‚ùå –î–ª—è BUY —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return STOP_LOSS
        elif direction == 'SELL' and stop_loss <= entry_price:
            await update.message.reply_text("‚ùå –î–ª—è SELL —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return STOP_LOSS
        
        context.user_data['stop_loss'] = stop_loss
        
        await update.message.reply_text(
            f"üõë *–°—Ç–æ–ø-–ª–æ—Å—Å:* {stop_loss}\n\n"
            "üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1.0900, 1.0950, 1.1000",
            parse_mode='Markdown'
        )
        return TAKE_PROFITS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:")
        return STOP_LOSS

@log_performance
async def process_take_profits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process take profit prices"""
    try:
        take_profits_text = update.message.text.replace(',', '.').split(',')
        take_profits = [float(tp.strip()) for tp in take_profits_text if tp.strip()]
        
        if not take_profits:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:")
            return TAKE_PROFITS
        
        entry_price = context.user_data.get('entry_price', 0)
        direction = context.user_data.get('direction', 'BUY')
        
        # Validate take profit prices based on direction
        for tp in take_profits:
            if direction == 'BUY' and tp <= entry_price:
                await update.message.reply_text("‚ùå –î–ª—è BUY —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return TAKE_PROFITS
            elif direction == 'SELL' and tp >= entry_price:
                await update.message.reply_text("‚ùå –î–ª—è SELL —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return TAKE_PROFITS
        
        context.user_data['take_profits'] = take_profits
        
        await update.message.reply_text(
            f"üéØ *–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã:* {', '.join(map(str, take_profits))}\n\n"
            "üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –º–µ–∂–¥—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏ –≤ % —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%):\n\n"
            "–ü—Ä–∏–º–µ—Ä –¥–ª—è 3 —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤: 50, 30, 20",
            parse_mode='Markdown'
        )
        return VOLUME_DISTRIBUTION
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤:")
        return TAKE_PROFITS

@log_performance
async def process_volume_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process volume distribution"""
    try:
        volume_text = update.message.text.replace(',', '.').split(',')
        volume_distribution = [float(vol.strip()) for vol in volume_text if vol.strip()]
        
        if not volume_distribution:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:")
            return VOLUME_DISTRIBUTION
        
        # Check if sum is approximately 100%
        total_volume = sum(volume_distribution)
        if abs(total_volume - 100) > 0.1:
            await update.message.reply_text(f"‚ùå –°—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100% (—Å–µ–π—á–∞—Å: {total_volume}%). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return VOLUME_DISTRIBUTION
        
        take_profits = context.user_data.get('take_profits', [])
        if len(volume_distribution) != len(take_profits):
            await update.message.reply_text(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–∞ ({len(volume_distribution)}) –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ ({len(take_profits)}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return VOLUME_DISTRIBUTION
        
        context.user_data['volume_distribution'] = volume_distribution
        
        # Perform final calculation and show results
        return await show_calculation_results(update, context)
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–∞:")
        return VOLUME_DISTRIBUTION

@log_performance
async def show_calculation_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show final calculation results"""
    user_data = context.user_data
    
    # Extract all parameters
    instrument_type = user_data.get('instrument_type', 'forex')
    currency_pair = user_data.get('currency_pair', 'EURUSD')
    direction = user_data.get('direction', 'BUY')
    risk_percent = user_data.get('risk_percent', 0.02)
    deposit = user_data.get('deposit', 1000)
    leverage = user_data.get('leverage', '1:100')
    entry_price = user_data.get('entry_price', 1.0)
    stop_loss = user_data.get('stop_loss', 0.9)
    take_profits = user_data.get('take_profits', [1.1])
    volume_distribution = user_data.get('volume_distribution', [100])
    
    # Calculate position size and risk
    calculation_result = FastRiskCalculator.calculate_position_size_fast(
        deposit=deposit,
        leverage=leverage,
        instrument_type=instrument_type,
        currency_pair=currency_pair,
        entry_price=entry_price,
        stop_loss=stop_loss,
        direction=direction,
        risk_percent=risk_percent
    )
    
    position_size = calculation_result['position_size']
    risk_amount = calculation_result['risk_amount']
    stop_pips = calculation_result['stop_pips']
    required_margin = calculation_result['required_margin']
    free_margin = calculation_result['free_margin']
    
    # Calculate profits for each take profit level
    profit_calculations = FastRiskCalculator.calculate_profits_fast(
        instrument_type=instrument_type,
        currency_pair=currency_pair,
        entry_price=entry_price,
        take_profits=take_profits,
        position_size=position_size,
        volume_distribution=volume_distribution,
        direction=direction
    )
    
    # Build results text
    results_text = f"""
üéØ *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê*

*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {currency_pair} ({INSTRUMENT_TYPES.get(instrument_type, instrument_type)})
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${deposit:,.2f}
‚Ä¢ –ü–ª–µ—á–æ: {leverage}
‚Ä¢ –†–∏—Å–∫: {risk_percent*100}% (${risk_amount:.2f})

*–¶–µ–Ω—ã:*
‚Ä¢ –í—Ö–æ–¥: {entry_price}
‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {stop_pips:.1f} –ø—É–Ω–∫—Ç–æ–≤

*–ü–æ–∑–∏—Ü–∏—è:*
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.2f} –ª–æ—Ç–æ–≤
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–∞—Ä–∂–∞: ${required_margin:.2f}
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–∞—è –º–∞—Ä–∂–∞: ${free_margin:.2f}

*–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã:*
"""
    
    for i, profit_calc in enumerate(profit_calculations):
        results_text += f"""
TP{profit_calc['level']}:
  ‚Ä¢ –¶–µ–Ω–∞: {profit_calc['price']}
  ‚Ä¢ –û–±—ä–µ–º: {profit_calc['volume_percent']}% ({profit_calc['volume_lots']:.2f} –ª–æ—Ç–æ–≤)
  ‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç: ${profit_calc['profit']:.2f}
  ‚Ä¢ ROI: {profit_calc['roi_percent']:.1f}%
"""
    
    total_profit = profit_calculations[-1]['cumulative_profit'] if profit_calculations else 0
    risk_reward_ratio = total_profit / risk_amount if risk_amount > 0 else 0
    
    results_text += f"""
*–ò—Ç–æ–≥–∏:*
‚Ä¢ –û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${total_profit:.2f}
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R/R: {risk_reward_ratio:.2f}:1
‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_percent*100}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
"""
    
    # Add recommendation based on risk/reward
    if risk_reward_ratio >= 2:
        results_text += "\n‚úÖ *–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!*"
    elif risk_reward_ratio >= 1:
        results_text += "\n‚ö†Ô∏è *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.*"
    else:
        results_text += "\n‚ùå *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ!*"
    
    keyboard = [
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="save_to_portfolio")],
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_calculation")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    if update.message:
        await update.message.reply_text(
            results_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.edit_message_text(
            results_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return MAIN_MENU

# Constants
INSTRUMENT_TYPES = {
    'forex': 'Forex',
    'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 
    'indices': '–ò–Ω–¥–µ–∫—Å—ã',
    'commodities': '–¢–æ–≤–∞—Ä—ã',
    'metals': '–ú–µ—Ç–∞–ª–ª—ã'
}

INSTRUMENT_PRESETS = {
    'forex': ['EURUSD', 'GBPUSD', 'USDJPY', 'USDCAD', 'AUDUSD', 'NZDUSD', 'EURGBP'],
    'crypto': ['BTCUSD', 'ETHUSD', 'XRPUSD', 'ADAUSD', 'SOLUSD', 'DOTUSD'],
    'indices': ['US30', 'NAS100', 'SPX500', 'DAX40', 'FTSE100'],
    'commodities': ['OIL', 'NATGAS', 'COPPER', 'GOLD'],
    'metals': ['XAUUSD', 'XAGUSD', 'XPTUSD']
}

PIP_VALUES = {
    'EURUSD': 10, 'GBPUSD': 10, 'USDJPY': 9, 'USDCHF': 10,
    'USDCAD': 10, 'AUDUSD': 10, 'NZDUSD': 10, 'EURGBP': 10,
    'BTCUSD': 1, 'ETHUSD': 1, 'XRPUSD': 10, 'ADAUSD': 10,
    'DOTUSD': 1, 'SOLUSD': 1,
    'US30': 1, 'NAS100': 1, 'SPX500': 1, 'DAX40': 1,
    'FTSE100': 1,
    'OIL': 10, 'NATGAS': 10, 'COPPER': 10, 'GOLD': 10,
    'XAUUSD': 10, 'XAGUSD': 50, 'XPTUSD': 10
}

CONTRACT_SIZES = {
    'forex': 100000,
    'crypto': 1,
    'indices': 1,
    'commodities': 100,
    'metals': 100
}

LEVERAGES = ['1:10', '1:20', '1:50', '1:100', '1:200', '1:500', '1:1000']
RISK_LEVELS = ['2%', '5%', '10%', '15%', '20%', '25%']
TRADE_DIRECTIONS = ['BUY', 'SELL']

# Analytics Engine
class AnalyticsEngine:
    @staticmethod
    def calculate_risk_reward_analysis(trades: List[Dict]) -> Dict[str, Any]:
        closed_trades = [t for t in trades if t.get('status') == 'closed']
        if not closed_trades:
            return {
                'average_risk_reward': 0,
                'best_trade': 0,
                'worst_trade': 0,
                'consistency_score': 0,
                'risk_score': 0
            }
        risk_reward_ratios = []
        profits = []
        for trade in closed_trades:
            risk = trade.get('risk_amount', 0)
            profit = trade.get('profit', 0)
            if risk > 0:
                risk_reward_ratios.append(abs(profit / risk))
            profits.append(profit)
        return {
            'average_risk_reward': sum(risk_reward_ratios) / len(risk_reward_ratios) if risk_reward_ratios else 0,
            'best_trade': max(profits) if profits else 0,
            'worst_trade': min(profits) if profits else 0,
            'consistency_score': AnalyticsEngine.calculate_consistency(profits),
            'risk_score': AnalyticsEngine.calculate_risk_score(profits)
        }

    @staticmethod
    def calculate_consistency(profits: List[float]) -> float:
        if len(profits) < 2:
            return 0
        positive_profits = [p for p in profits if p > 0]
        if not positive_profits:
            return 0
        return (len(positive_profits) / len(profits)) * 100

    @staticmethod
    def calculate_risk_score(profits: List[float]) -> float:
        if not profits:
            return 0
        avg_profit = sum(profits) / len(profits)
        if avg_profit == 0:
            return 0
        positive_count = len([p for p in profits if p > 0])
        return (positive_count / len(profits)) * 100

    @staticmethod
    def generate_strategy_recommendations(portfolio: Dict) -> List[str]:
        recommendations = []
        performance = portfolio.get('performance', {})
        win_rate = performance.get('win_rate', 0)
        avg_profit = performance.get('average_profit', 0)
        avg_loss = performance.get('average_loss', 0)
        if win_rate < 40:
            recommendations.append("üìâ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É –¥–æ 1-2%")
            recommendations.append("üéØ –£–≤–µ–ª–∏—á—å—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ 1:3")
        if avg_profit < abs(avg_loss) and win_rate > 50:
            recommendations.append("‚ö° –£–ª—É—á—à–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π - —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Ä–∞–Ω—å—à–µ")
        if len(portfolio.get('allocation', {})) < 3:
            recommendations.append("üåê –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å - —Ç–æ—Ä–≥—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        if not recommendations:
            recommendations.append("‚úÖ –í–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        return recommendations

# Ultra-fast risk calculator
class FastRiskCalculator:
    @staticmethod
    def calculate_pip_value_fast(instrument_type: str, currency_pair: str, lot_size: float) -> float:
        base_pip_value = PIP_VALUES.get(currency_pair, 10)
        if instrument_type == 'crypto':
            return base_pip_value * lot_size * 0.1
        elif instrument_type == 'indices':
            return base_pip_value * lot_size * 0.01
        else:
            return base_pip_value * lot_size

    @staticmethod
    def calculate_position_size_fast(
        deposit: float,
        leverage: str,
        instrument_type: str,
        currency_pair: str,
        entry_price: float,
        stop_loss: float,
        direction: str,
        risk_percent: float = 0.02
    ) -> Dict[str, float]:
        try:
            cache_key = f"pos_{deposit}_{leverage}_{instrument_type}_{currency_pair}_{entry_price}_{stop_loss}_{direction}_{risk_percent}"
            cached_result = fast_cache.get(cache_key)
            if cached_result:
                return cached_result

            lev_value = int(leverage.split(':')[1])
            risk_amount = deposit * risk_percent

            if instrument_type == 'forex':
                stop_pips = abs(entry_price - stop_loss) * 10000
            elif instrument_type == 'crypto':
                stop_pips = abs(entry_price - stop_loss) * 100
            elif instrument_type in ['indices', 'commodities', 'metals']:
                stop_pips = abs(entry_price - stop_loss) * 10
            else:
                stop_pips = abs(entry_price - stop_loss) * 10000

            pip_value_per_lot = FastRiskCalculator.calculate_pip_value_fast(
                instrument_type, currency_pair, 1.0
            )

            if stop_pips > 0 and pip_value_per_lot > 0:
                max_lots_by_risk = risk_amount / (stop_pips * pip_value_per_lot)
            else:
                max_lots_by_risk = 0

            contract_size = CONTRACT_SIZES.get(instrument_type, 100000)
            if entry_price > 0:
                max_lots_by_margin = (deposit * lev_value) / (contract_size * entry_price)
            else:
                max_lots_by_margin = 0

            position_size = min(max_lots_by_risk, max_lots_by_margin, 50.0)
            if position_size < 0.01:
                position_size = 0.01
            else:
                position_size = round(position_size * 100) / 100

            required_margin = (position_size * contract_size * entry_price) / lev_value if lev_value > 0 else 0

            result = {
                'position_size': position_size,
                'risk_amount': risk_amount,
                'stop_pips': stop_pips,
                'required_margin': required_margin,
                'risk_percent': (risk_amount / deposit) * 100 if deposit > 0 else 0,
                'free_margin': deposit - required_margin
            }
            fast_cache.set(cache_key, result)
            return result
        except Exception as e:
            logger.error(f"Error in fast position size calculation: {e}")
            return {
                'position_size': 0.01,
                'risk_amount': 0,
                'stop_pips': 0,
                'required_margin': 0,
                'risk_percent': 0,
                'free_margin': deposit
            }

    @staticmethod
    def calculate_profits_fast(
        instrument_type: str,
        currency_pair: str,
        entry_price: float,
        take_profits: List[float],
        position_size: float,
        volume_distribution: List[float],
        direction: str
    ) -> List[Dict[str, Any]]:
        profits = []
        total_profit = 0
        for i, (tp, vol_pct) in enumerate(zip(take_profits, volume_distribution)):
            if instrument_type == 'forex':
                tp_pips = abs(entry_price - tp) * 10000
            elif instrument_type == 'crypto':
                tp_pips = abs(entry_price - tp) * 100
            elif instrument_type in ['indices', 'commodities', 'metals']:
                tp_pips = abs(entry_price - tp) * 10
            else:
                tp_pips = abs(entry_price - tp) * 10000

            volume_lots = position_size * (vol_pct / 100)
            pip_value = FastRiskCalculator.calculate_pip_value_fast(
                instrument_type, currency_pair, volume_lots
            )
            profit = tp_pips * pip_value
            total_profit += profit
            contract_size = CONTRACT_SIZES.get(instrument_type, 100000)
            position_value = position_size * contract_size * entry_price
            profits.append({
                'level': i + 1,
                'price': tp,
                'volume_percent': vol_pct,
                'volume_lots': volume_lots,
                'profit': profit,
                'cumulative_profit': total_profit,
                'pips': tp_pips,
                'roi_percent': (profit / position_value) * 100 if position_value > 0 else 0
            })
        return profits

# Ultra-fast cache manager
class FastCache:
    def __init__(self, max_size=500, ttl=300):
        self.cache = {}
        self.max_size = max_size
        self.ttl = ttl

    def get(self, key):
        if key in self.cache:
            data, timestamp = self.cache[key]
            if time.time() - timestamp < self.ttl:
                return data
            else:
                del self.cache[key]
        return None

    def set(self, key, value):
        if len(self.cache) >= self.max_size:
            self.cache.clear()
        self.cache[key] = (value, time.time())

# Global cache
fast_cache = FastCache()

# Performance logging decorator
def log_performance(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        execution_time = time.time() - start_time
        if execution_time > 1.0:
            logger.warning(f"Slow operation: {func.__name__} took {execution_time:.2f}s")
        return result
    return wrapper

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå PRO Bot token not found!")
        return

    logger.info("üöÄ Starting ULTRA-FAST PRO Risk Management Bot v3.0 with Enhanced Portfolio & Analytics...")

    application = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('quick', quick_command),
            CommandHandler('portfolio', portfolio_command),
            CommandHandler('analytics', analytics_command),
            CommandHandler('info', pro_info_command),
            CallbackQueryHandler(handle_main_menu, pattern='^(pro_calculation|quick_calculation|portfolio|analytics|pro_info|main_menu)$')
        ],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            INSTRUMENT_TYPE: [CallbackQueryHandler(process_instrument_type, pattern='^inst_type_')],
            CURRENCY: [
                CallbackQueryHandler(process_currency_selection, pattern='^currency_'),
                CallbackQueryHandler(process_custom_currency, pattern='^custom_currency$'),
                CallbackQueryHandler(back_to_instrument, pattern='^back_to_instrument$')
            ],
            CUSTOM_INSTRUMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_currency_input)],
            DIRECTION: [CallbackQueryHandler(process_direction, pattern='^direction_')],
            RISK_PERCENT: [CallbackQueryHandler(process_risk_percent, pattern='^risk_')],
            DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit)],
            LEVERAGE: [CallbackQueryHandler(process_leverage, pattern='^leverage_')],
            ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_entry)],
            STOP_LOSS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_stop_loss)],
            TAKE_PROFITS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_take_profits)],
            VOLUME_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_volume_distribution)],
            PORTFOLIO_MENU: [
                CallbackQueryHandler(portfolio_trades, pattern='^portfolio_trades$'),
                CallbackQueryHandler(portfolio_balance, pattern='^portfolio_balance$'),
                CallbackQueryHandler(portfolio_performance, pattern='^portfolio_performance$'),
                CallbackQueryHandler(portfolio_history, pattern='^portfolio_history$'),
                CallbackQueryHandler(portfolio_add_trade, pattern='^portfolio_add_trade$'),
                CallbackQueryHandler(portfolio_deposit, pattern='^portfolio_deposit$'),
                CallbackQueryHandler(portfolio_back, pattern='^portfolio_back$')
            ],
            ANALYTICS_MENU: [
                CallbackQueryHandler(analytics_risk_reward, pattern='^analytics_risk_reward$'),
                CallbackQueryHandler(analytics_strategy_perf, pattern='^analytics_strategy_perf$'),
                CallbackQueryHandler(analytics_trade_stats, pattern='^analytics_trade_stats$'),
                CallbackQueryHandler(analytics_optimization, pattern='^analytics_optimization$'),
                CallbackQueryHandler(analytics_recommendations, pattern='^analytics_recommendations$'),
                CallbackQueryHandler(analytics_back, pattern='^analytics_back$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –≤ webhook-—Ä–µ–∂–∏–º–µ
    port = int(os.environ.get('PORT', 10000))
    webhook_url = os.getenv('RENDER_EXTERNAL_URL', 'https://risk-management-bot-pro.onrender.com')
    logger.info(f"üåê PRO Starting on port {port}")
    try:
        if webhook_url and "render.com" in webhook_url:
            logger.info(f"üîó PRO Webhook URL: {webhook_url}/webhook")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                webhook_url=webhook_url + "/webhook"
            )
        else:
            application.run_polling()
    except Exception as e:
        logger.error(f"‚ùå Error starting PRO bot: {e}")

if __name__ == '__main__':
    main()
