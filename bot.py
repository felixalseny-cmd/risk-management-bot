import os
import logging
import json
from datetime import datetime
from typing import Dict, List
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
DEPOSIT, LEVERAGE, CURRENCY, ENTRY, STOP_LOSS, TAKE_PROFITS, VOLUME_DISTRIBUTION = range(7)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# PIP –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
PIP_VALUES = {
    'EURUSD': 10, 'GBPUSD': 10, 'USDJPY': 9, 'USDCHF': 10,
    'USDCAD': 10, 'AUDUSD': 10, 'NZDUSD': 10, 'EURGBP': 10,
    'EURJPY': 9, 'GBPJPY': 9, 'XAUUSD': 10, 'XAGUSD': 50
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø–ª–µ—á–∏
LEVERAGES = ['1:100', '1:200', '1:500', '1:1000', '1:2000']

class RiskCalculator:
    @staticmethod
    def calculate_pip_value(currency_pair: str, lot_size: float) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∏–ø—Å–∞ –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        base_pip_value = PIP_VALUES.get(currency_pair, 10)
        return base_pip_value * lot_size

    @staticmethod
    def calculate_position_size(
        deposit: float,
        leverage: str,
        currency_pair: str,
        entry_price: float,
        stop_loss: float,
        risk_percent: float = 0.02
    ) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞"""
        # –ü–∞—Ä—Å–∏–º –ø–ª–µ—á–æ
        lev_value = int(leverage.split(':')[1])
        
        # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –≤ –¥–µ–Ω—å–≥–∞—Ö
        risk_amount = deposit * risk_percent
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤ –ø–∏–ø—Å–∞—Ö
        stop_pips = abs(entry_price - stop_loss) * 10000
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –ø–æ —Ä–∏—Å–∫—É
        pip_value_per_lot = RiskCalculator.calculate_pip_value(currency_pair, 1.0)
        max_lots_by_risk = risk_amount / (stop_pips * pip_value_per_lot)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –ø–æ –º–∞—Ä–∂–µ
        contract_size = 100000  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        max_lots_by_margin = (deposit * lev_value) / contract_size
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        position_size = min(max_lots_by_risk, max_lots_by_margin, 10.0)  # –ú–∞–∫—Å–∏–º—É–º 10 –ª–æ—Ç–æ–≤
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if position_size < 0.01:
            position_size = 0.01
        else:
            position_size = round(position_size * 100) / 100
        
        # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π –º–∞—Ä–∂–∏
        required_margin = (position_size * contract_size) / lev_value
        
        return {
            'position_size': position_size,
            'risk_amount': risk_amount,
            'stop_pips': stop_pips,
            'required_margin': required_margin,
            'risk_percent': (risk_amount / deposit) * 100,
            'max_risk_lots': max_lots_by_risk,
            'max_margin_lots': max_lots_by_margin
        }

    @staticmethod
    def calculate_profits(
        currency_pair: str,
        entry_price: float,
        take_profits: List[float],
        position_size: float,
        volume_distribution: List[float]
    ) -> List[Dict]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        profits = []
        total_profit = 0
        
        for i, (tp, volume_percent) in enumerate(zip(take_profits, volume_distribution)):
            tp_pips = abs(entry_price - tp) * 10000
            volume_lots = position_size * (volume_percent / 100)
            pip_value = RiskCalculator.calculate_pip_value(currency_pair, volume_lots)
            profit = tp_pips * pip_value
            total_profit += profit
            
            profits.append({
                'level': i + 1,
                'price': tp,
                'volume_percent': volume_percent,
                'volume_lots': volume_lots,
                'profit': profit,
                'cumulative_profit': total_profit
            })
        
        return profits

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = update.message.from_user.id
    user_data[user_id] = {}
    
    await update.message.reply_text(
        "üéØ *Risk Management Calculator Bot*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USD:",
        parse_mode='Markdown'
    )
    
    return DEPOSIT

async def process_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    user_id = update.message.from_user.id
    
    try:
        deposit = float(update.message.text)
        if deposit <= 0:
            await update.message.reply_text("‚ùå –î–µ–ø–æ–∑–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return DEPOSIT
        
        user_data[user_id]['deposit'] = deposit
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–µ—á–∞
        keyboard = []
        for leverage in LEVERAGES:
            keyboard.append([InlineKeyboardButton(leverage, callback_data=f"leverage_{leverage}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –î–µ–ø–æ–∑–∏—Ç: ${deposit:,.2f}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ:",
            reply_markup=reply_markup
        )
        
        return LEVERAGE
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:")
        return DEPOSIT

async def process_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–µ—á–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    leverage = query.data.replace('leverage_', '')
    user_data[user_id]['leverage'] = leverage
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    currency_pairs = list(PIP_VALUES.keys())
    keyboard = []
    row = []
    for i, pair in enumerate(currency_pairs):
        row.append(InlineKeyboardButton(pair, callback_data=f"currency_{pair}"))
        if (i + 1) % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ –ü–ª–µ—á–æ: {leverage}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=reply_markup
    )
    
    return CURRENCY

async def process_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    currency = query.data.replace('currency_', '')
    user_data[user_id]['currency'] = currency
    
    await query.edit_message_text(
        f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {currency}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0660):"
    )
    
    return ENTRY

async def process_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"""
    user_id = update.message.from_user.id
    
    try:
        entry_price = float(update.message.text)
        user_data[user_id]['entry'] = entry_price
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:"
        )
        
        return STOP_LOSS
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:")
        return ENTRY

async def process_stop_loss(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    user_id = update.message.from_user.id
    
    try:
        stop_loss = float(update.message.text)
        user_data[user_id]['stop_loss'] = stop_loss
        
        await update.message.reply_text(
            f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0550, 1.0460):"
        )
        
        return TAKE_PROFITS
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:")
        return STOP_LOSS

async def process_take_profits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        take_profits_text = update.message.text
        take_profits = [float(tp.strip()) for tp in take_profits_text.split(',')]
        user_data[user_id]['take_profits'] = take_profits
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤
        await update.message.reply_text(
            f"‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {', '.join(map(str, take_profits))}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –≤ % –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é "
            f"(–≤—Å–µ–≥–æ {len(take_profits)} –∑–Ω–∞—á–µ–Ω–∏–π, —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%):\n"
            f"–ü—Ä–∏–º–µ—Ä: 50, 30, 20"
        )
        
        return VOLUME_DISTRIBUTION
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤:")
        return TAKE_PROFITS

async def process_volume_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        distribution_text = update.message.text
        distribution = [float(d.strip()) for d in distribution_text.split(',')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if sum(distribution) != 100:
            await update.message.reply_text(
                f"‚ùå –°—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%. –í–∞—à–∞ —Å—É–º–º–∞: {sum(distribution)}%\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:"
            )
            return VOLUME_DISTRIBUTION
        
        user_data[user_id]['volume_distribution'] = distribution
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = user_data[user_id]
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        position_result = RiskCalculator.calculate_position_size(
            deposit=data['deposit'],
            leverage=data['leverage'],
            currency_pair=data['currency'],
            entry_price=data['entry'],
            stop_loss=data['stop_loss']
        )
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        profits_result = RiskCalculator.calculate_profits(
            currency_pair=data['currency'],
            entry_price=data['entry'],
            take_profits=data['take_profits'],
            position_size=position_result['position_size'],
            volume_distribution=data['volume_distribution']
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""
üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê*

*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
üíµ –î–µ–ø–æ–∑–∏—Ç: ${data['deposit']:,.2f}
‚öñÔ∏è –ü–ª–µ—á–æ: {data['leverage']}
üéØ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {data['currency']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {data['entry']}
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {data['stop_loss']}

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*
üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: *{position_result['position_size']:.2f} –ª–æ—Ç–∞*
‚ö†Ô∏è –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${position_result['risk_amount']:.2f} ({position_result['risk_percent']:.1f}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)
üìâ –°—Ç–æ–ø-–ª–æ—Å—Å: {position_result['stop_pips']:.0f} –ø–∏–ø—Å–æ–≤
üí≥ –¢—Ä–µ–±—É–µ–º–∞—è –º–∞—Ä–∂–∞: ${position_result['required_margin']:.2f}

*–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –∏ –ø—Ä–∏–±—ã–ª—å:*
"""
        
        for profit in profits_result:
            response += f"\nüéØ TP{profit['level']} ({profit['volume_percent']}% –æ–±—ä–µ–º–∞):"
            response += f"\n   –¶–µ–Ω–∞: {profit['price']}"
            response += f"\n   –û–±—ä–µ–º: {profit['volume_lots']:.2f} –ª–æ—Ç–∞"
            response += f"\n   –ü—Ä–∏–±—ã–ª—å: ${profit['profit']:.2f}"
            response += f"\n   –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit['cumulative_profit']:.2f}\n"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="save_preset")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
        user_data[user_id]['last_calculation'] = {
            'position_result': position_result,
            'profits_result': profits_result
        }
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤:")
        return VOLUME_DISTRIBUTION

async def save_preset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if 'presets' not in user_data[user_id]:
        user_data[user_id]['presets'] = []
    
    preset_data = {
        'timestamp': datetime.now().isoformat(),
        'data': user_data[user_id].copy()
    }
    
    user_data[user_id]['presets'].append(preset_data)
    
    await query.edit_message_text(
        "‚úÖ –ü—Ä–µ—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /presets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞."
    )

async def show_presets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã"""
    user_id = update.message.from_user.id
    
    if 'presets' not in user_data[user_id] or not user_data[user_id]['presets']:
        await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤.")
        return
    
    presets = user_data[user_id]['presets']
    
    for i, preset in enumerate(presets[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–µ—Å–µ—Ç–æ–≤
        data = preset['data']
        await update.message.reply_text(
            f"üìã *–ü—Ä–µ—Å–µ—Ç #{i}*\n"
            f"–î–µ–ø–æ–∑–∏—Ç: ${data['deposit']:,.2f}\n"
            f"–ü–ª–µ—á–æ: {data['leverage']}\n"
            f"–ü–∞—Ä–∞: {data['currency']}\n"
            f"–í—Ö–æ–¥: {data['entry']}\n"
            f"SL: {data['stop_loss']}\n"
            f"TP: {', '.join(map(str, data['take_profits']))}",
            parse_mode='Markdown'
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    await update.message.reply_text(
        '–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.'
    )
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"""
    help_text = """
ü§ñ *Risk Management Bot - –ü–æ–º–æ—â—å*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
/presets - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞:*
1. –í–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞
2. –í—ã–±–æ—Ä –ø–ª–µ—á–∞
3. –í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
4. –í–≤–æ–¥ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
5. –í–≤–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
6. –í–≤–æ–¥ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
7. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
- –£—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –º–µ–∂–¥—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤ –≤ % –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(token).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit)],
            LEVERAGE: [CallbackQueryHandler(process_leverage, pattern='^leverage_')],
            CURRENCY: [CallbackQueryHandler(process_currency, pattern='^currency_')],
            ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_entry)],
            STOP_LOSS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_stop_loss)],
            TAKE_PROFITS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_take_profits)],
            VOLUME_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_volume_distribution)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('presets', show_presets))
    application.add_handler(CallbackQueryHandler(save_preset, pattern='^save_preset$'))
    application.add_handler(CallbackQueryHandler(start, pattern='^new_calculation$'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()