import os
import logging
import asyncio
from datetime import datetime
from typing import Dict, List, Any
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
DEPOSIT, LEVERAGE, CURRENCY, ENTRY, STOP_LOSS, TAKE_PROFITS, VOLUME_DISTRIBUTION = range(7)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data: Dict[int, Dict[str, Any]] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PIP_VALUES = {
    'EURUSD': 10, 'GBPUSD': 10, 'USDJPY': 9, 'USDCHF': 10,
    'USDCAD': 10, 'AUDUSD': 10, 'NZDUSD': 10, 'EURGBP': 10,
    'EURJPY': 9, 'GBPJPY': 9, 'XAUUSD': 10, 'XAGUSD': 50
}
LEVERAGES = ['1:100', '1:200', '1:500', '1:1000', '1:2000']


class RiskCalculator:
    @staticmethod
    def calculate_pip_value(currency_pair: str, lot_size: float) -> float:
        base_pip_value = PIP_VALUES.get(currency_pair, 10)
        return base_pip_value * lot_size

    @staticmethod
    def calculate_position_size(
        deposit: float,
        leverage: str,
        currency_pair: str,
        entry_price: float,
        stop_loss: float,
        risk_percent: float = 0.02
    ) -> Dict[str, float]:
        lev_value = int(leverage.split(':')[1])
        risk_amount = deposit * risk_percent
        stop_pips = abs(entry_price - stop_loss) * 10000
        pip_value_per_lot = RiskCalculator.calculate_pip_value(currency_pair, 1.0)
        max_lots_by_risk = risk_amount / (stop_pips * pip_value_per_lot) if stop_pips > 0 else 0
        contract_size = 100000
        max_lots_by_margin = (deposit * lev_value) / contract_size
        position_size = min(max_lots_by_risk, max_lots_by_margin, 10.0)
        if position_size < 0.01:
            position_size = 0.01
        else:
            position_size = round(position_size * 100) / 100
        required_margin = (position_size * contract_size) / lev_value
        return {
            'position_size': position_size,
            'risk_amount': risk_amount,
            'stop_pips': stop_pips,
            'required_margin': required_margin,
            'risk_percent': (risk_amount / deposit) * 100,
        }

    @staticmethod
    def calculate_profits(
        currency_pair: str,
        entry_price: float,
        take_profits: List[float],
        position_size: float,
        volume_distribution: List[float]
    ) -> List[Dict[str, Any]]:
        profits = []
        total_profit = 0
        for i, (tp, vol_pct) in enumerate(zip(take_profits, volume_distribution)):
            tp_pips = abs(entry_price - tp) * 10000
            volume_lots = position_size * (vol_pct / 100)
            pip_value = RiskCalculator.calculate_pip_value(currency_pair, volume_lots)
            profit = tp_pips * pip_value
            total_profit += profit
            profits.append({
                'level': i + 1,
                'price': tp,
                'volume_percent': vol_pct,
                'volume_lots': volume_lots,
                'profit': profit,
                'cumulative_profit': total_profit
            })
        return profits


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    user_id = update.message.from_user.id
    user_data[user_id] = {}
    await update.message.reply_text(
        "üéØ *Risk Management Calculator Bot*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USD:",
        parse_mode='Markdown'
    )
    return DEPOSIT

async def process_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    user_id = update.message.from_user.id
    try:
        deposit = float(update.message.text.replace(',', '').replace(' ', ''))
        if deposit <= 0:
            raise ValueError
        user_data[user_id]['deposit'] = deposit
        keyboard = [[InlineKeyboardButton(l, callback_data=f"leverage_{l}")] for l in LEVERAGES]
        await update.message.reply_text(
            f"‚úÖ –î–µ–ø–æ–∑–∏—Ç: ${deposit:,.2f}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return LEVERAGE
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:")
        return DEPOSIT

async def process_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    await query.answer()
    user_id = query.from_user.id
    leverage = query.data.replace('leverage_', '')
    user_data[user_id]['leverage'] = leverage
    
    pairs = list(PIP_VALUES.keys())
    keyboard = []
    for i in range(0, len(pairs), 3):
        row = []
        for j in range(3):
            if i + j < len(pairs):
                row.append(InlineKeyboardButton(pairs[i + j], callback_data=f"currency_{pairs[i + j]}"))
        keyboard.append(row)
    
    await query.edit_message_text(
        f"‚úÖ –ü–ª–µ—á–æ: {leverage}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CURRENCY

async def process_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    await query.answer()
    user_id = query.from_user.id
    currency = query.data.replace('currency_', '')
    user_data[user_id]['currency'] = currency
    await query.edit_message_text(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {currency}\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0660):")
    return ENTRY

async def process_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    user_id = update.message.from_user.id
    try:
        entry = float(update.message.text)
        user_data[user_id]['entry'] = entry
        await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry}\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:")
        return STOP_LOSS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:")
        return ENTRY

async def process_stop_loss(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    user_id = update.message.from_user.id
    try:
        sl = float(update.message.text)
        user_data[user_id]['stop_loss'] = sl
        await update.message.reply_text(
            f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å: {sl}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0550, 1.0460):"
        )
        return TAKE_PROFITS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:")
        return STOP_LOSS

async def process_take_profits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    user_id = update.message.from_user.id
    try:
        tps = [float(x.strip()) for x in update.message.text.split(',')]
        user_data[user_id]['take_profits'] = tps
        await update.message.reply_text(
            f"‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {', '.join(map(str, tps))}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –≤ % –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é "
            f"(–≤—Å–µ–≥–æ {len(tps)} –∑–Ω–∞—á–µ–Ω–∏–π, —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%):\n"
            f"–ü—Ä–∏–º–µ—Ä: 50, 30, 20"
        )
        return VOLUME_DISTRIBUTION
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤:")
        return TAKE_PROFITS

async def process_volume_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    user_id = update.message.from_user.id
    try:
        dist = [float(x.strip()) for x in update.message.text.split(',')]
        if abs(sum(dist) - 100) > 1e-5:
            await update.message.reply_text(
                f"‚ùå –°—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%. –í–∞—à–∞ —Å—É–º–º–∞: {sum(dist)}%\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:"
            )
            return VOLUME_DISTRIBUTION
        user_data[user_id]['volume_distribution'] = dist
        data = user_data[user_id]
        pos = RiskCalculator.calculate_position_size(
            deposit=data['deposit'],
            leverage=data['leverage'],
            currency_pair=data['currency'],
            entry_price=data['entry'],
            stop_loss=data['stop_loss']
        )
        profits = RiskCalculator.calculate_profits(
            currency_pair=data['currency'],
            entry_price=data['entry'],
            take_profits=data['take_profits'],
            position_size=pos['position_size'],
            volume_distribution=dist
        )
        resp = f"""
üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê*

*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
üíµ –î–µ–ø–æ–∑–∏—Ç: ${data['deposit']:,.2f}
‚öñÔ∏è –ü–ª–µ—á–æ: {data['leverage']}
üéØ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {data['currency']}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {data['entry']}
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {data['stop_loss']}

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*
üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: *{pos['position_size']:.2f} –ª–æ—Ç–∞*
‚ö†Ô∏è –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${pos['risk_amount']:.2f} ({pos['risk_percent']:.1f}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)
üìâ –°—Ç–æ–ø-–ª–æ—Å—Å: {pos['stop_pips']:.0f} –ø–∏–ø—Å–æ–≤
üí≥ –¢—Ä–µ–±—É–µ–º–∞—è –º–∞—Ä–∂–∞: ${pos['required_margin']:.2f}

*–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –∏ –ø—Ä–∏–±—ã–ª—å:*
"""
        for p in profits:
            resp += f"\nüéØ TP{p['level']} ({p['volume_percent']}% –æ–±—ä–µ–º–∞):"
            resp += f"\n   –¶–µ–Ω–∞: {p['price']}"
            resp += f"\n   –û–±—ä–µ–º: {p['volume_lots']:.2f} –ª–æ—Ç–∞"
            resp += f"\n   –ü—Ä–∏–±—ã–ª—å: ${p['profit']:.2f}"
            resp += f"\n   –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${p['cumulative_profit']:.2f}\n"
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="save_preset")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]
        ]
        await update.message.reply_text(resp, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤:")
        return VOLUME_DISTRIBUTION

async def save_preset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    uid = query.from_user.id
    if uid not in user_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å /start")
        return
    if 'presets' not in user_data[uid]:
        user_data[uid]['presets'] = []
    user_data[uid]['presets'].append({
        'timestamp': datetime.now().isoformat(),
        'data': user_data[uid].copy()
    })
    await query.edit_message_text(
        "‚úÖ –ü—Ä–µ—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /presets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞."
    )

async def show_presets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    uid = update.message.from_user.id
    presets = user_data.get(uid, {}).get('presets', [])
    if not presets:
        await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤.")
        return
    for i, p in enumerate(presets[-5:], 1):
        d = p['data']
        await update.message.reply_text(
            f"üìã *–ü—Ä–µ—Å–µ—Ç #{i}*\n"
            f"–î–µ–ø–æ–∑–∏—Ç: ${d['deposit']:,.2f}\n"
            f"–ü–ª–µ—á–æ: {d['leverage']}\n"
            f"–ü–∞—Ä–∞: {d['currency']}\n"
            f"–í—Ö–æ–¥: {d['entry']}\n"
            f"SL: {d['stop_loss']}\n"
            f"TP: {', '.join(map(str, d['take_profits']))}",
            parse_mode='Markdown'
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "ü§ñ *Risk Management Bot - –ü–æ–º–æ—â—å*\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç\n"
            "/presets - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
            parse_mode='Markdown'
        )

async def new_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        await start(update, context)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
application = None

@app.route('/')
def home():
    return "ü§ñ Risk Management Bot is running!"

@app.route('/health')
def health():
    return "OK"

@app.route('/webhook', methods=['POST'])
def webhook():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('UTF-8')
        update = Update.de_json(json_string, application.bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ event loop
        asyncio.run_coroutine_threadsafe(
            application.process_update(update),
            application._loop
        )
        return 'OK'
    return 'Bad Request', 400

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    global application
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    token = token.strip()
    application = Application.builder().token(token).build()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit)],
            LEVERAGE: [CallbackQueryHandler(process_leverage, pattern='^leverage_')],
            CURRENCY: [CallbackQueryHandler(process_currency, pattern='^currency_')],
            ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_entry)],
            STOP_LOSS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_stop_loss)],
            TAKE_PROFITS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_take_profits)],
            VOLUME_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_volume_distribution)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('presets', show_presets))
    application.add_handler(CallbackQueryHandler(save_preset, pattern='^save_preset$'))
    application.add_handler(CallbackQueryHandler(new_calculation, pattern='^new_calculation$'))

    return application

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    webhook_url = os.getenv('RENDER_EXTERNAL_URL', '') + '/webhook'
    
    if not token or not webhook_url:
        logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    application = setup_bot()
    if application:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.initialize()
        await application.start()
        await application.updater.start_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 10000)),
            url_path="/webhook",
            webhook_url=webhook_url
        )
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º
    asyncio.run(set_webhook())
    
    # Flask –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ PTB —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä

if __name__ == '__main__':
    main()
