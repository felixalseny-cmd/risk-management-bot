import os
import logging
import asyncio
import re
import time
import functools
import json
import io
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def log_performance(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        execution_time = time.time() - start_time
        if execution_time > 1.0:
            logger.warning(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {func.__name__} –∑–∞–Ω—è–ª–∞ {execution_time:.2f}—Å")
        return result
    return wrapper

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MAIN_MENU, INSTRUMENT_TYPE, CUSTOM_INSTRUMENT, DIRECTION, 
    RISK_PERCENT, DEPOSIT, LEVERAGE, CURRENCY, ENTRY, 
    STOP_LOSS, TAKE_PROFITS, VOLUME_DISTRIBUTION,
    PORTFOLIO_MENU, ADD_TRADE_INSTRUMENT, ADD_TRADE_DIRECTION,
    ADD_TRADE_ENTRY, ADD_TRADE_EXIT, ADD_TRADE_VOLUME, ADD_TRADE_PROFIT,
    DEPOSIT_AMOUNT, WITHDRAW_AMOUNT, SETTINGS_MENU, SAVE_STRATEGY_NAME
) = range(23)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict[str, Any]] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INSTRUMENT_TYPES = {
    'forex': '–§–æ—Ä–µ–∫—Å',
    'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 
    'indices': '–ò–Ω–¥–µ–∫—Å—ã',
    'commodities': '–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã',
    'metals': '–ú–µ—Ç–∞–ª–ª—ã'
}

INSTRUMENT_PRESETS = {
    'forex': ['EURUSD', 'GBPUSD', 'USDJPY', 'USDCAD', 'AUDUSD', 'NZDUSD', 'EURGBP'],
    'crypto': ['BTCUSD', 'ETHUSD', 'XRPUSD', 'ADAUSD', 'SOLUSD', 'DOTUSD'],
    'indices': ['US30', 'NAS100', 'SPX500', 'DAX40', 'FTSE100'],
    'commodities': ['OIL', 'NATGAS', 'COPPER', 'GOLD'],
    'metals': ['XAUUSD', 'XAGUSD', 'XPTUSD']
}

PIP_VALUES = {
    # Forex - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
    'EURUSD': 10, 'GBPUSD': 10, 'USDJPY': 9, 'USDCHF': 10,
    'USDCAD': 10, 'AUDUSD': 10, 'NZDUSD': 10, 'EURGBP': 10,
    'EURJPY': 9, 'GBPJPY': 9, 'EURCHF': 10, 'AUDJPY': 9,
    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    'BTCUSD': 1, 'ETHUSD': 1, 'XRPUSD': 10, 'ADAUSD': 10,
    'DOTUSD': 1, 'LTCUSD': 1, 'BCHUSD': 1, 'LINKUSD': 1,
    # –ò–Ω–¥–µ–∫—Å—ã
    'US30': 1, 'NAS100': 1, 'SPX500': 1, 'DAX40': 1,
    'FTSE100': 1, 'NIKKEI225': 1, 'ASX200': 1,
    # –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    'OIL': 10, 'NATGAS': 10, 'COPPER': 10,
    # –ú–µ—Ç–∞–ª–ª—ã
    'XAUUSD': 10, 'XAGUSD': 50, 'XPTUSD': 10
}

CONTRACT_SIZES = {
    'forex': 100000,
    'crypto': 1,
    'indices': 1,
    'commodities': 100,
    'metals': 100
}

LEVERAGES = ['1:10', '1:20', '1:50', '1:100', '1:200', '1:500', '1:1000']
RISK_LEVELS = ['1%', '2%', '3%', '5%', '7%', '10%', '15%']
TRADE_DIRECTIONS = ['BUY', 'SELL']
CURRENCIES = ['USD', 'EUR', 'GBP', 'JPY', 'CHF', 'CAD', 'AUD']

# –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
class PortfolioManager:
    @staticmethod
    def initialize_user_portfolio(user_id: int):
        if user_id not in user_data:
            user_data[user_id] = {}
        
        if 'portfolio' not in user_data[user_id]:
            user_data[user_id]['portfolio'] = {
                'initial_balance': 0,
                'current_balance': 0,
                'trades': [],
                'performance': {
                    'total_trades': 0,
                    'winning_trades': 0,
                    'losing_trades': 0,
                    'total_profit': 0,
                    'total_loss': 0,
                    'win_rate': 0,
                    'average_profit': 0,
                    'average_loss': 0,
                    'profit_factor': 0,
                    'max_drawdown': 0,
                    'sharpe_ratio': 0
                },
                'allocation': {},
                'history': [],
                'settings': {
                    'default_risk': 0.02,
                    'currency': 'USD',
                    'leverage': '1:100'
                },
                'saved_strategies': []
            }
    
    @staticmethod
    def add_trade(user_id: int, trade_data: Dict):
        PortfolioManager.initialize_user_portfolio(user_id)
        
        trade_id = len(user_data[user_id]['portfolio']['trades']) + 1
        trade_data['id'] = trade_id
        trade_data['timestamp'] = datetime.now().isoformat()
        
        user_data[user_id]['portfolio']['trades'].append(trade_data)
        PortfolioManager.update_performance_metrics(user_id)
        
        instrument = trade_data.get('instrument', 'Unknown')
        if instrument not in user_data[user_id]['portfolio']['allocation']:
            user_data[user_id]['portfolio']['allocation'][instrument] = 0
        user_data[user_id]['portfolio']['allocation'][instrument] += 1
        
        user_data[user_id]['portfolio']['history'].append({
            'type': 'trade',
            'action': 'open' if trade_data.get('status') == 'open' else 'close',
            'instrument': instrument,
            'profit': trade_data.get('profit', 0),
            'timestamp': trade_data['timestamp']
        })
    
    @staticmethod
    def update_performance_metrics(user_id: int):
        portfolio = user_data[user_id]['portfolio']
        trades = portfolio['trades']
        
        if not trades:
            return
        
        closed_trades = [t for t in trades if t.get('status') == 'closed']
        if not closed_trades:
            return
            
        winning_trades = [t for t in closed_trades if t.get('profit', 0) > 0]
        losing_trades = [t for t in closed_trades if t.get('profit', 0) < 0]
        
        portfolio['performance']['total_trades'] = len(closed_trades)
        portfolio['performance']['winning_trades'] = len(winning_trades)
        portfolio['performance']['losing_trades'] = len(losing_trades)
        portfolio['performance']['total_profit'] = sum(t.get('profit', 0) for t in winning_trades)
        portfolio['performance']['total_loss'] = abs(sum(t.get('profit', 0) for t in losing_trades))
        
        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        if closed_trades:
            portfolio['performance']['win_rate'] = (len(winning_trades) / len(closed_trades)) * 100
            
            portfolio['performance']['average_profit'] = (
                portfolio['performance']['total_profit'] / len(winning_trades) 
                if winning_trades else 0
            )
            portfolio['performance']['average_loss'] = (
                portfolio['performance']['total_loss'] / len(losing_trades) 
                if losing_trades else 0
            )
            
            # Profit Factor
            if portfolio['performance']['total_loss'] > 0:
                portfolio['performance']['profit_factor'] = (
                    portfolio['performance']['total_profit'] / portfolio['performance']['total_loss']
                )
            else:
                portfolio['performance']['profit_factor'] = float('inf') if portfolio['performance']['total_profit'] > 0 else 0
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            running_balance = portfolio['initial_balance']
            peak = running_balance
            max_drawdown = 0
            
            for trade in sorted(closed_trades, key=lambda x: x['timestamp']):
                running_balance += trade.get('profit', 0)
                if running_balance > peak:
                    peak = running_balance
                drawdown = (peak - running_balance) / peak * 100
                if drawdown > max_drawdown:
                    max_drawdown = drawdown
            
            portfolio['performance']['max_drawdown'] = max_drawdown
    
    @staticmethod
    def add_balance_operation(user_id: int, operation_type: str, amount: float, description: str = ""):
        PortfolioManager.initialize_user_portfolio(user_id)
        
        user_data[user_id]['portfolio']['history'].append({
            'type': 'balance',
            'action': operation_type,
            'amount': amount,
            'description': description,
            'timestamp': datetime.now().isoformat()
        })
        
        if operation_type == 'deposit':
            user_data[user_id]['portfolio']['current_balance'] += amount
            if user_data[user_id]['portfolio']['initial_balance'] == 0:
                user_data[user_id]['portfolio']['initial_balance'] = amount
        elif operation_type == 'withdrawal':
            user_data[user_id]['portfolio']['current_balance'] -= amount

    @staticmethod
    def get_performance_recommendations(user_id: int) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        portfolio = user_data[user_id]['portfolio']
        perf = portfolio['performance']
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ Win Rate
        if perf['win_rate'] < 40:
            recommendations.append("üéØ –£–≤–µ–ª–∏—á—å—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–æ 1:3 –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–∏–∑–∫–æ–≥–æ Win Rate")
        elif perf['win_rate'] > 60:
            recommendations.append("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π Win Rate! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π")
        else:
            recommendations.append("üìä Win Rate –≤ –Ω–æ—Ä–º–µ. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏")
        
        # –ê–Ω–∞–ª–∏–∑ Profit Factor
        if perf['profit_factor'] < 1:
            recommendations.append("‚ö†Ô∏è Profit Factor –Ω–∏–∂–µ 1.0 - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        elif perf['profit_factor'] > 2:
            recommendations.append("üí∞ –û—Ç–ª–∏—á–Ω—ã–π Profit Factor! –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å–∞–¥–∫–∏
        if perf['max_drawdown'] > 20:
            recommendations.append(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ {perf['max_drawdown']:.1f}% —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞. –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É")
        elif perf['max_drawdown'] < 5:
            recommendations.append("üìà –ù–∏–∑–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤
        if perf['average_profit'] > 0 and perf['average_loss'] > 0:
            reward_ratio = perf['average_profit'] / perf['average_loss']
            if reward_ratio < 1:
                recommendations.append("üîª –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –º–µ–Ω—å—à–µ 1. –£–ª—É—á—à–∞–π—Ç–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã")
            elif reward_ratio > 2:
                recommendations.append("üî∫ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
        allocation = portfolio.get('allocation', {})
        if len(allocation) < 3:
            recommendations.append("üåê –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å - —Ç–æ—Ä–≥—É–π—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        elif len(allocation) > 10:
            recommendations.append("üéØ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ª—É—á—à–∏—Ö")
        
        return recommendations

    @staticmethod
    def save_strategy(user_id: int, strategy_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        PortfolioManager.initialize_user_portfolio(user_id)
        
        strategy_id = len(user_data[user_id]['portfolio']['saved_strategies']) + 1
        strategy_data['id'] = strategy_id
        strategy_data['created_at'] = datetime.now().isoformat()
        
        user_data[user_id]['portfolio']['saved_strategies'].append(strategy_data)
        return strategy_id

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –æ—Ç—á–µ—Ç–æ–≤
class PDFReportGenerator:
    @staticmethod
    def generate_portfolio_report(user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF)"""
        try:
            portfolio = user_data[user_id]['portfolio']
            performance = portfolio['performance']
            
            report = f"""
–û–¢–ß–ï–¢ –ü–û –ü–û–†–¢–§–ï–õ–Æ
–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}

–ë–ê–õ–ê–ù–° –ò –°–†–ï–î–°–¢–í–ê:
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${portfolio['initial_balance']:,.2f}
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${portfolio['current_balance']:,.2f}
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${portfolio['current_balance'] - portfolio['initial_balance']:,.2f}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {performance['total_trades']}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {performance['winning_trades']}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {performance['losing_trades']}
‚Ä¢ Win Rate: {performance['win_rate']:.1f}%
‚Ä¢ Profit Factor: {performance['profit_factor']:.2f}
‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {performance['max_drawdown']:.1f}%

–î–û–•–û–î–ù–û–°–¢–¨:
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${performance['total_profit']:,.2f}
‚Ä¢ –û–±—â–∏–π —É–±—ã—Ç–æ–∫: ${performance['total_loss']:,.2f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${performance['average_profit']:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${performance['average_loss']:.2f}

–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:
"""
            
            allocation = portfolio.get('allocation', {})
            for instrument, count in allocation.items():
                report += f"‚Ä¢ {instrument}: {count} —Å–¥–µ–ª–æ–∫\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = PortfolioManager.get_performance_recommendations(user_id)
            if recommendations:
                report += "\nPRO –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                for i, rec in enumerate(recommendations[:3], 1):
                    report += f"{i}. {rec}\n"
            
            return report
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"

# –ë—ã—Å—Ç—Ä—ã–π –∫—ç—à
class FastCache:
    def __init__(self, max_size=500, ttl=300):
        self.cache = {}
        self.max_size = max_size
        self.ttl = ttl
    
    def get(self, key):
        if key in self.cache:
            data, timestamp = self.cache[key]
            if time.time() - timestamp < self.ttl:
                return data
            else:
                del self.cache[key]
        return None
    
    def set(self, key, value):
        if len(self.cache) >= self.max_size:
            self.cache.clear()
        self.cache[key] = (value, time.time())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
fast_cache = FastCache()

# –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–æ–≤
class FastRiskCalculator:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–æ–≤ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    
    @staticmethod
    def calculate_pip_value_fast(instrument_type: str, currency_pair: str, lot_size: float) -> float:
        """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∏–ø—Å–∞"""
        base_pip_value = PIP_VALUES.get(currency_pair, 10)
        
        if instrument_type == 'crypto':
            return base_pip_value * lot_size * 0.1
        elif instrument_type == 'indices':
            return base_pip_value * lot_size * 0.01
        else:
            return base_pip_value * lot_size

    @staticmethod
    def calculate_position_size_fast(
        deposit: float,
        leverage: str,
        instrument_type: str,
        currency_pair: str,
        entry_price: float,
        stop_loss: float,
        direction: str,
        risk_percent: float = 0.02
    ) -> Dict[str, float]:
        """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ë—ã—Å—Ç—Ä—ã–π –∫–ª—é—á –∫—ç—à–∞
            cache_key = f"pos_{deposit}_{leverage}_{instrument_type}_{currency_pair}_{entry_price}_{stop_loss}_{direction}_{risk_percent}"
            cached_result = fast_cache.get(cache_key)
            if cached_result:
                return cached_result
            
            lev_value = int(leverage.split(':')[1])
            risk_amount = deposit * risk_percent
            
            # –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if instrument_type == 'forex':
                stop_pips = abs(entry_price - stop_loss) * 10000
            elif instrument_type == 'crypto':
                stop_pips = abs(entry_price - stop_loss) * 100
            elif instrument_type in ['indices', 'commodities', 'metals']:
                stop_pips = abs(entry_price - stop_loss) * 10
            else:
                stop_pips = abs(entry_price - stop_loss) * 10000

            pip_value_per_lot = FastRiskCalculator.calculate_pip_value_fast(
                instrument_type, currency_pair, 1.0
            )
            
            if stop_pips > 0 and pip_value_per_lot > 0:
                max_lots_by_risk = risk_amount / (stop_pips * pip_value_per_lot)
            else:
                max_lots_by_risk = 0
            
            contract_size = CONTRACT_SIZES.get(instrument_type, 100000)
            if entry_price > 0:
                max_lots_by_margin = (deposit * lev_value) / (contract_size * entry_price)
            else:
                max_lots_by_margin = 0
            
            position_size = min(max_lots_by_risk, max_lots_by_margin, 50.0)
            
            if position_size < 0.01:
                position_size = 0.01
            else:
                position_size = round(position_size * 100) / 100
                
            required_margin = (position_size * contract_size * entry_price) / lev_value if lev_value > 0 else 0
            
            result = {
                'position_size': position_size,
                'risk_amount': risk_amount,
                'stop_pips': stop_pips,
                'required_margin': required_margin,
                'risk_percent': (risk_amount / deposit) * 100 if deposit > 0 else 0,
                'free_margin': deposit - required_margin
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            fast_cache.set(cache_key, result)
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {
                'position_size': 0.01,
                'risk_amount': 0,
                'stop_pips': 0,
                'required_margin': 0,
                'risk_percent': 0,
                'free_margin': deposit
            }

    @staticmethod
    def calculate_profits_fast(
        instrument_type: str,
        currency_pair: str,
        entry_price: float,
        take_profits: List[float],
        position_size: float,
        volume_distribution: List[float],
        direction: str
    ) -> List[Dict[str, Any]]:
        """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏"""
        profits = []
        total_profit = 0
        
        for i, (tp, vol_pct) in enumerate(zip(take_profits, volume_distribution)):
            if instrument_type == 'forex':
                tp_pips = abs(entry_price - tp) * 10000
            elif instrument_type == 'crypto':
                tp_pips = abs(entry_price - tp) * 100
            elif instrument_type in ['indices', 'commodities', 'metals']:
                tp_pips = abs(entry_price - tp) * 10
            else:
                tp_pips = abs(entry_price - tp) * 10000
                
            volume_lots = position_size * (vol_pct / 100)
            pip_value = FastRiskCalculator.calculate_pip_value_fast(
                instrument_type, currency_pair, volume_lots
            )
            profit = tp_pips * pip_value
            total_profit += profit
            
            contract_size = CONTRACT_SIZES.get(instrument_type, 100000)
            position_value = position_size * contract_size * entry_price
            
            profits.append({
                'level': i + 1,
                'price': tp,
                'volume_percent': vol_pct,
                'volume_lots': volume_lots,
                'profit': profit,
                'cumulative_profit': total_profit,
                'pips': tp_pips,
                'roi_percent': (profit / position_value) * 100 if position_value > 0 else 0
            })
            
        return profits

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@log_performance
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        if update.message:
            user = update.message.from_user
        elif update.callback_query:
            user = update.callback_query.from_user
            await update.callback_query.answer()
        else:
            return ConversationHandler.END
            
        user_name = user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
        
        welcome_text = f"""
üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*

üéØ *PRO –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†–∏—Å–∫–∞–º–∏ v4.0*

‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:*
"""
        
        user_id = user.id
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        PortfolioManager.initialize_user_portfolio(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_calculation")],
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="quick_calculation")],
            [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
            [InlineKeyboardButton("üìö PRO –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="pro_info")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üöÄ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (Beta)", callback_data="analytics")]
        ]
        
        if update.message:
            await update.message.reply_text(
                welcome_text, 
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                welcome_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        return ConversationHandler.END

@log_performance
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥"""
    try:
        if update.message:
            await update.message.reply_text(
                "‚ùå *–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n"
                "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞\n"
                "üíº –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º\n\n"
                "üë®‚Äçüíª *PRO –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:* [@fxfeelgood](https://t.me/fxfeelgood)",
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        return ConversationHandler.END

@log_performance
async def quick_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç"""
    return await start_quick_calculation(update, context)

@log_performance
async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"""
    try:
        if update.message:
            user_id = update.message.from_user.id
        else:
            user_id = update.callback_query.from_user.id
            await update.callback_query.answer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        PortfolioManager.initialize_user_portfolio(user_id)
        
        portfolio = user_data[user_id]['portfolio']
        current_balance = portfolio['current_balance']
        
        portfolio_text = f"""
üíº *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ—Ä—Ç—Ñ–µ–ª–µ–º*

üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${current_balance:,.2f}
üìä *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* {len(portfolio['trades'])}

üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üìà –û–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º (–≤–Ω–µ—Å—Ç–∏/—Å–Ω—è—Ç—å)
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("üìà –û–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫", callback_data="portfolio_trades")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", callback_data="portfolio_balance")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="portfolio_performance")],
            [InlineKeyboardButton("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="portfolio_report")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
            [InlineKeyboardButton("üí∏ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç", callback_data="portfolio_deposit")],
            [InlineKeyboardButton("üèß –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="portfolio_withdraw")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if update.message:
            await update.message.reply_text(
                portfolio_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                portfolio_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return PORTFOLIO_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_command: {e}")
        return await start(update, context)

@log_performance
async def analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ –±—É–¥—É—â–µ–µ"""
    try:
        analytics_text = """
üìà *PRO –ê–ù–ê–õ–ò–¢–ò–ö–ê - –†–ê–ó–î–ï–õ –í –†–ê–ó–†–ê–ë–û–¢–ö–ï*

üöÄ *–°–ö–û–†–û –î–û–°–¢–£–ü–ù–û:*

ü§ñ *AI-–ê–ù–ê–õ–ò–ó –°–¢–†–ê–¢–ï–ì–ò–ô:*
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π

üåê *–†–ï–ê–õ–¨–ù–´–ï –ö–û–¢–ò–†–û–í–ö–ò –í –†–ï–ñ–ò–ú–ï –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò:*
‚Ä¢ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–∞–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ª–µ—Ç—É
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üìä *–ü–†–û–î–í–ò–ù–£–¢–´–ô –ë–≠–ö–¢–ï–°–¢–ò–ù–ì:*
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

üîÆ *–ü–†–ï–î–°–ö–ê–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:*
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ Risk management 2.0

üí° *–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TradingView
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥

*–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –í–µ—Ä—Å–∏—è 5.0 —É–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!* üöÄ
"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_calculation")],
            [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if update.message:
            await update.message.reply_text(
                analytics_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                analytics_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_command: {e}")

@log_performance
async def pro_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """PRO –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    try:
        info_text = """
üìö *PRO –ò–ù–°–¢–†–£–ö–¶–ò–ò v4.0*

üéØ *–ß–¢–û –£–ú–ï–ï–¢ –ë–û–¢ –°–ï–ô–ß–ê–°:*

‚ö° *–ú–ì–ù–û–í–ï–ù–ù–´–ï –†–ê–°–ß–ï–¢–´:*
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ–∑–∏—Ü–∏–π —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–∞
‚Ä¢ –£—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–§–æ—Ä–µ–∫—Å, –∫—Ä–∏–ø—Ç–æ, –∏–Ω–¥–µ–∫—Å—ã)

üíº *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–ï–õ–ï–ú:*
‚Ä¢ –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫ –∏ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
‚Ä¢ –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: Win Rate, Profit Factor, –ø—Ä–æ—Å–∞–¥–∫–∏
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è

üìä *PRO –§–£–ù–ö–¶–ò–û–ù–ê–õ:*
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞
‚Ä¢ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã

üîß *–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:*
‚Ä¢ üåê –§–æ—Ä–µ–∫—Å (50+ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä)
‚Ä¢ ‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (15+ –ø–∞—Ä)  
‚Ä¢ üìà –ò–Ω–¥–µ–∫—Å—ã (12+ –∏–Ω–¥–µ–∫—Å–æ–≤)
‚Ä¢ ‚ö° –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (8+ —Ç–∏–ø–æ–≤)
‚Ä¢ üèÖ –ú–µ—Ç–∞–ª–ª—ã (6+ —Ç–∏–ø–æ–≤)

üöÄ *–°–ö–û–†–û –í –ë–£–î–£–©–ò–• –û–ë–ù–û–í–õ–ï–ù–ò–Ø–•:*

ü§ñ *–ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢:*
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ –£–º–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

üåê *–û–ù–õ–ê–ô–ù –ö–û–¢–ò–†–û–í–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê:*
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å –º–∏—Ä–æ–≤—ã—Ö –±–∏—Ä–∂ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TradingView –∏ –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏

üìà *–ü–†–û–î–í–ò–ù–£–¢–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:*
‚Ä¢ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ Risk management 2.0 —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏

üíé *–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:*
‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –±—Ä–æ–∫–µ—Ä–∞–º–∏

üë®‚Äçüíª *–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö:* [@fxfeelgood](https://t.me/fxfeelgood)

*PRO v4.0 | –£–º–Ω–æ ‚Ä¢ –ë—ã—Å—Ç—Ä–æ ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ* üöÄ
"""
        if update.message:
            await update.message.reply_text(
                info_text, 
                parse_mode='Markdown', 
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
        else:
            await update.callback_query.edit_message_text(
                info_text,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pro_info_command: {e}")

@log_performance
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        if update.message:
            user_id = update.message.from_user.id
        else:
            user_id = update.callback_query.from_user.id
            await update.callback_query.answer()
        
        PortfolioManager.initialize_user_portfolio(user_id)
        settings = user_data[user_id]['portfolio']['settings']
        
        settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PRO –¢—Ä–µ–π–¥–µ—Ä–∞*

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ üí∞ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {settings['default_risk']*100}%
‚Ä¢ üíµ –í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {settings['currency']}
‚Ä¢ ‚öñÔ∏è –ü–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings['leverage']}

üîß *–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
"""
        
        keyboard = [
            [InlineKeyboardButton(f"üí∞ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {settings['default_risk']*100}%", callback_data="change_risk")],
            [InlineKeyboardButton(f"üíµ –í–∞–ª—é—Ç–∞: {settings['currency']}", callback_data="change_currency")],
            [InlineKeyboardButton(f"‚öñÔ∏è –ü–ª–µ—á–æ: {settings['leverage']}", callback_data="change_leverage")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="saved_strategies")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if update.message:
            await update.message.reply_text(
                settings_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                settings_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return SETTINGS_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_command: {e}")

@log_performance
async def change_risk_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        await query.edit_message_text(
            "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üü¢ 1% (–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)", callback_data="set_risk_0.01")],
                [InlineKeyboardButton("üü° 2% (–£–º–µ—Ä–µ–Ω–Ω—ã–π)", callback_data="set_risk_0.02")],
                [InlineKeyboardButton("üü† 3% (–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)", callback_data="set_risk_0.03")],
                [InlineKeyboardButton("üî¥ 5% (–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)", callback_data="set_risk_0.05")],
                [InlineKeyboardButton("‚ö´ 7% (–í—ã—Å–æ–∫–∏–π)", callback_data="set_risk_0.07")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ change_risk_setting: {e}")

@log_performance
async def save_risk_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        risk_level = float(query.data.replace("set_risk_", ""))
        user_data[user_id]['portfolio']['settings']['default_risk'] = risk_level
        
        await query.edit_message_text(
            f"‚úÖ *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {risk_level*100}%*\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_risk_setting: {e}")

@log_performance
async def portfolio_trades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        portfolio = user_data[user_id].get('portfolio', {})
        trades = portfolio.get('trades', [])
        
        if not trades:
            await query.edit_message_text(
                "üì≠ *–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio_back")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
        recent_trades = trades[-5:]
        trades_text = "üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*\n\n"
        
        for trade in reversed(recent_trades):
            status_emoji = "üü¢" if trade.get('profit', 0) > 0 else "üî¥" if trade.get('profit', 0) < 0 else "‚ö™"
            trades_text += (
                f"{status_emoji} *{trade.get('instrument', 'N/A')}* | "
                f"{trade.get('direction', 'N/A')} | "
                f"–ü—Ä–∏–±—ã–ª—å: ${trade.get('profit', 0):.2f}\n"
                f"üìÖ {trade.get('timestamp', '')[:16]}\n\n"
            )
        
        trades_text += f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}"
        
        await query.edit_message_text(
            trades_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="portfolio_full_history")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_trades: {e}")

@log_performance
async def portfolio_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        portfolio = user_data[user_id].get('portfolio', {})
        allocation = portfolio.get('allocation', {})
        performance = portfolio.get('performance', {})
        
        balance_text = "üí∞ *–ë–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ*\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
        initial_balance = portfolio.get('initial_balance', 0)
        current_balance = portfolio.get('current_balance', 0)
        total_profit = performance.get('total_profit', 0)
        total_loss = performance.get('total_loss', 0)
        net_profit = total_profit + total_loss
        
        balance_text += f"üí≥ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${initial_balance:,.2f}\n"
        balance_text += f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:,.2f}\n"
        balance_text += f"üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${net_profit:.2f}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
        if allocation:
            balance_text += "üåê *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:*\n"
            for instrument, count in list(allocation.items())[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5
                percentage = (count / len(portfolio['trades'])) * 100 if portfolio['trades'] else 0
                balance_text += f"‚Ä¢ {instrument}: {count} —Å–¥–µ–ª–æ–∫ ({percentage:.1f}%)\n"
        else:
            balance_text += "üåê *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        await query.edit_message_text(
            balance_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∏ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç", callback_data="portfolio_deposit")],
                [InlineKeyboardButton("üèß –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="portfolio_withdraw")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_balance: {e}")

@log_performance
async def portfolio_performance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        portfolio = user_data[user_id].get('portfolio', {})
        performance = portfolio.get('performance', {})
        
        perf_text = "üìä *PRO –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = performance.get('total_trades', 0)
        win_rate = performance.get('win_rate', 0)
        avg_profit = performance.get('average_profit', 0)
        avg_loss = performance.get('average_loss', 0)
        profit_factor = performance.get('profit_factor', 0)
        max_drawdown = performance.get('max_drawdown', 0)
        
        perf_text += f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
        perf_text += f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {win_rate:.1f}%\n"
        perf_text += f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}\n"
        perf_text += f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${avg_loss:.2f}\n"
        perf_text += f"‚öñÔ∏è Profit Factor: {profit_factor:.2f}\n"
        perf_text += f"üìä –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.1f}%\n\n"
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = PortfolioManager.get_performance_recommendations(user_id)
        
        if recommendations:
            perf_text += "üí° *PRO –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n"
            for i, rec in enumerate(recommendations[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                perf_text += f"{i}. {rec}\n"
        
        await query.edit_message_text(
            perf_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìà –û–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫", callback_data="portfolio_trades")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="portfolio_balance")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_performance: {e}")

@log_performance
async def portfolio_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = PDFReportGenerator.generate_portfolio_report(user_id)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(report_text) > 4000:
            parts = [report_text[i:i+4000] for i in range(0, len(report_text), 4000)]
            for part in parts:
                await query.message.reply_text(
                    f"```\n{part}\n```",
                    parse_mode='Markdown'
                )
        else:
            await query.edit_message_text(
                f"```\n{report_text}\n```",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        
        await query.message.reply_text(
            "üìÑ *–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
            "–í –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="portfolio_performance")],
                [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")]
            ])
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_report: {e}")
        await query.edit_message_text(
            "‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_back")]
            ])
        )

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —á–∞—Å—Ç–∏...

@log_performance
async def portfolio_deposit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üí∏ *–í–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞*\n\n"
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_balance")]
            ])
        )
        return DEPOSIT_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_deposit_menu: {e}")

@log_performance
async def handle_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞"""
    try:
        user_id = update.message.from_user.id
        try:
            amount = float(update.message.text)
            
            if amount <= 0:
                await update.message.reply_text(
                    "‚ùå *–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!*\n\n"
                    "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:",
                    parse_mode='Markdown'
                )
                return DEPOSIT_AMOUNT
            
            PortfolioManager.add_balance_operation(user_id, 'deposit', amount, "–î–µ–ø–æ–∑–∏—Ç")
            
            await update.message.reply_text(
                f"‚úÖ *–î–µ–ø–æ–∑–∏—Ç –Ω–∞ ${amount:,.2f} —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω!*\n\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user_data[user_id]['portfolio']['current_balance']:,.2f}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="portfolio_balance")],
                    [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")]
                ])
            )
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n\n"
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞:",
                parse_mode='Markdown'
            )
            return DEPOSIT_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_deposit_amount: {e}")

@log_performance
async def portfolio_withdraw_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        current_balance = user_data[user_id]['portfolio']['current_balance']
        
        await query.edit_message_text(
            f"üí∏ *–°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
            f"üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${current_balance:,.2f}\n\n"
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_balance")]
            ])
        )
        return WITHDRAW_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_withdraw_menu: {e}")

@log_performance
async def handle_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Å–Ω—è—Ç–∏—è"""
    try:
        user_id = update.message.from_user.id
        try:
            amount = float(update.message.text)
            current_balance = user_data[user_id]['portfolio']['current_balance']
            
            if amount <= 0:
                await update.message.reply_text(
                    "‚ùå *–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!*\n\n"
                    "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è:",
                    parse_mode='Markdown'
                )
                return WITHDRAW_AMOUNT
            
            if amount > current_balance:
                await update.message.reply_text(
                    f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!*\n\n"
                    f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: ${current_balance:,.2f}\n"
                    f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${amount:,.2f}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É:",
                    parse_mode='Markdown'
                )
                return WITHDRAW_AMOUNT
            
            PortfolioManager.add_balance_operation(user_id, 'withdrawal', amount, "–°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤")
            
            await update.message.reply_text(
                f"‚úÖ *–°–Ω—è—Ç–∏–µ ${amount:,.2f} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user_data[user_id]['portfolio']['current_balance']:,.2f}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="portfolio_balance")],
                    [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")]
                ])
            )
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n\n"
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã:",
                parse_mode='Markdown'
            )
            return WITHDRAW_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_withdraw_amount: {e}")

@log_performance
async def portfolio_add_trade_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üìà *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏*\n\n"
            "üíé *–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä: EURUSD, BTCUSD):",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
            ])
        )
        return ADD_TRADE_INSTRUMENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_add_trade_start: {e}")

@log_performance
async def handle_trade_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏"""
    try:
        user_id = update.message.from_user.id
        instrument = update.message.text.upper().strip()
        
        context.user_data['new_trade'] = {'instrument': instrument}
        
        await update.message.reply_text(
            f"‚úÖ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {instrument}*\n\n"
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîº BUY", callback_data="trade_direction_BUY")],
                [InlineKeyboardButton("üîΩ SELL", callback_data="trade_direction_SELL")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_add_trade")]
            ])
        )
        return ADD_TRADE_DIRECTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_trade_instrument: {e}")

@log_performance
async def handle_trade_direction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        direction = query.data.replace("trade_direction_", "")
        context.user_data['new_trade']['direction'] = direction
        
        await query.edit_message_text(
            f"‚úÖ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}*\n\n"
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_add_trade")]
            ])
        )
        return ADD_TRADE_ENTRY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_trade_direction: {e}")

@log_performance
async def handle_trade_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"""
    try:
        user_id = update.message.from_user.id
        try:
            entry_price = float(update.message.text)
            context.user_data['new_trade']['entry_price'] = entry_price
            
            await update.message.reply_text(
                f"‚úÖ *–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}*\n\n"
                "üõë *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞:*",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="trade_direction_back")]
                ])
            )
            return ADD_TRADE_EXIT
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!*\n\n"
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞:",
                parse_mode='Markdown'
            )
            return ADD_TRADE_ENTRY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_trade_entry: {e}")

@log_performance
async def handle_trade_exit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞"""
    try:
        user_id = update.message.from_user.id
        try:
            exit_price = float(update.message.text)
            context.user_data['new_trade']['exit_price'] = exit_price
            
            await update.message.reply_text(
                f"‚úÖ *–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {exit_price}*\n\n"
                "üìä *–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≤ –ª–æ—Ç–∞—Ö:*",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="trade_entry_back")]
                ])
            )
            return ADD_TRADE_VOLUME
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!*\n\n"
                "üõë –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞:",
                parse_mode='Markdown'
            )
            return ADD_TRADE_EXIT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_trade_exit: {e}")

@log_performance
async def handle_trade_volume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞"""
    try:
        user_id = update.message.from_user.id
        try:
            volume = float(update.message.text)
            context.user_data['new_trade']['volume'] = volume
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            entry = context.user_data['new_trade']['entry_price']
            exit_price = context.user_data['new_trade']['exit_price']
            direction = context.user_data['new_trade']['direction']
            
            if direction == 'BUY':
                profit = (exit_price - entry) * volume * 10000  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è Forex
            else:
                profit = (entry - exit_price) * volume * 10000
            
            context.user_data['new_trade']['profit'] = profit
            
            await update.message.reply_text(
                f"‚úÖ *–û–±—ä–µ–º: {volume} –ª–æ—Ç–æ–≤*\n\n"
                f"üí∞ *–†–∞—Å—á–µ—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit:.2f}*\n\n"
                "üìù *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–¥–µ–ª–∫–µ* (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="confirm_trade")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="trade_exit_back")]
                ])
            )
            return ADD_TRADE_PROFIT
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä–µ–º–∞!*\n\n"
                "üìä –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:",
                parse_mode='Markdown'
            )
            return ADD_TRADE_VOLUME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_trade_volume: {e}")

@log_performance
async def confirm_trade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        trade_data = context.user_data['new_trade']
        trade_data['status'] = 'closed'
        
        PortfolioManager.add_trade(user_id, trade_data)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('new_trade', None)
        
        await query.edit_message_text(
            f"‚úÖ *–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n"
            f"üìà *–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:*\n"
            f"‚Ä¢ üíé –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {trade_data['instrument']}\n"
            f"‚Ä¢ üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade_data['direction']}\n"
            f"‚Ä¢ üí∞ –ü—Ä–∏–±—ã–ª—å: ${trade_data['profit']:.2f}\n"
            f"‚Ä¢ üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="portfolio_performance")],
                [InlineKeyboardButton("üìà –û–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫", callback_data="portfolio_trades")],
                [InlineKeyboardButton("üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_trade: {e}")

@log_performance
async def start_pro_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üìä *–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –†–ò–°–ö–û–í*\n\n"
            "üíé *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –§–æ—Ä–µ–∫—Å", callback_data="instrument_forex")],
                [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="instrument_crypto")],
                [InlineKeyboardButton("üìà –ò–Ω–¥–µ–∫—Å—ã", callback_data="instrument_indices")],
                [InlineKeyboardButton("‚ö° –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data="instrument_commodities")],
                [InlineKeyboardButton("üèÖ –ú–µ—Ç–∞–ª–ª—ã", callback_data="instrument_metals")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return INSTRUMENT_TYPE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_pro_calculation: {e}")
        return MAIN_MENU

@log_performance
async def start_quick_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "‚ö° *–ë–´–°–¢–†–´–ô –†–ê–°–ß–ï–¢ –†–ò–°–ö–û–í*\n\n"
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return DEPOSIT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_quick_calculation: {e}")
        return MAIN_MENU

@log_performance
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        await update.message.reply_text(
            "‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*\n\n"
            "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
            "üíº –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º\n"
            "üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="main_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unknown_command: {e}")

@log_performance
async def portfolio_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    return await portfolio_command(update, context)

@log_performance
async def trade_direction_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üìà *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏*\n\n"
            "üíé *–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä: EURUSD, BTCUSD):",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
            ])
        )
        return ADD_TRADE_INSTRUMENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ trade_direction_back: {e}")

@log_performance
async def trade_entry_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "‚úÖ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {instrument}*\n\n"
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîº BUY", callback_data="trade_direction_BUY")],
                [InlineKeyboardButton("üîΩ SELL", callback_data="trade_direction_SELL")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_add_trade")]
            ])
        )
        return ADD_TRADE_DIRECTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ trade_entry_back: {e}")

@log_performance
async def trade_exit_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "‚úÖ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}*\n\n"
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio_add_trade")]
            ])
        )
        return ADD_TRADE_ENTRY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ trade_exit_back: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@log_performance
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        query = update.callback_query
        if not query:
            return MAIN_MENU
            
        await query.answer()
        choice = query.data
        
        user_id = query.from_user.id
        if user_id in user_data:
            user_data[user_id]['last_activity'] = time.time()
        
        if choice == "pro_calculation":
            return await start_pro_calculation(update, context)
        elif choice == "quick_calculation":
            return await start_quick_calculation(update, context)
        elif choice == "portfolio":
            return await portfolio_command(update, context)
        elif choice == "analytics":
            await analytics_command(update, context)
            return MAIN_MENU
        elif choice == "pro_info":
            await pro_info_command(update, context)
            return MAIN_MENU
        elif choice == "settings":
            return await settings_command(update, context)
        elif choice == "main_menu":
            return await start(update, context)
        elif choice == "change_risk":
            await change_risk_setting(update, context)
            return SETTINGS_MENU
        elif choice.startswith("set_risk_"):
            await save_risk_setting(update, context)
            return SETTINGS_MENU
        elif choice == "portfolio_deposit":
            return await portfolio_deposit_menu(update, context)
        elif choice == "portfolio_withdraw":
            return await portfolio_withdraw_menu(update, context)
        elif choice == "portfolio_add_trade":
            return await portfolio_add_trade_start(update, context)
        elif choice.startswith("trade_direction_"):
            return await handle_trade_direction(update, context)
        elif choice == "confirm_trade":
            return await confirm_trade(update, context)
        elif choice == "portfolio_trades":
            await portfolio_trades(update, context)
            return PORTFOLIO_MENU
        elif choice == "portfolio_balance":
            await portfolio_balance(update, context)
            return PORTFOLIO_MENU
        elif choice == "portfolio_performance":
            await portfolio_performance(update, context)
            return PORTFOLIO_MENU
        elif choice == "portfolio_report":
            await portfolio_report(update, context)
            return PORTFOLIO_MENU
        elif choice == "portfolio_back":
            return await portfolio_command(update, context)
        
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_main_menu: {e}")
        return await start(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω PRO –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–∏—Å–∫–æ–≤ v4.0...")
    
    application = Application.builder().token(token).build()

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            SETTINGS_MENU: [CallbackQueryHandler(handle_main_menu)],
            PORTFOLIO_MENU: [CallbackQueryHandler(handle_main_menu)],
            DEPOSIT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_deposit_amount)],
            WITHDRAW_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_withdraw_amount)],
            ADD_TRADE_INSTRUMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trade_instrument)],
            ADD_TRADE_DIRECTION: [CallbackQueryHandler(handle_main_menu)],
            ADD_TRADE_ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trade_entry)],
            ADD_TRADE_EXIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trade_exit)],
            ADD_TRADE_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trade_volume)],
            ADD_TRADE_PROFIT: [CallbackQueryHandler(handle_main_menu)],
            INSTRUMENT_TYPE: [CallbackQueryHandler(handle_main_menu)],
            DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_deposit_amount)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('info', pro_info_command))
    application.add_handler(CommandHandler('help', pro_info_command))
    application.add_handler(CommandHandler('portfolio', portfolio_command))
    application.add_handler(CommandHandler('quick', quick_command))
    application.add_handler(CommandHandler('settings', settings_command))
    application.add_handler(CommandHandler('analytics', analytics_command))
    application.add_handler(CommandHandler('cancel', cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 10000))
    webhook_url = os.getenv('RENDER_EXTERNAL_URL', '')
    
    logger.info(f"üåê PRO –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        if webhook_url and "render.com" in webhook_url:
            logger.info(f"üîó PRO Webhook URL: {webhook_url}/webhook")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path="/webhook",
                webhook_url=webhook_url + "/webhook"
            )
        else:
            logger.info("üîÑ PRO –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
            application.run_polling()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PRO –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
