import os
import logging
import asyncio
import re
import time
import functools
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_errors.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def log_performance(max_time=1.0):
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = time.time()
            try:
                result = await func(*args, **kwargs)
                execution_time = time.time() - start_time
                if execution_time > max_time:
                    logger.warning(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {func.__name__} –∑–∞–Ω—è–ª–∞ {execution_time:.2f}—Å")
                return result
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e} (–≤—Ä–µ–º—è: {execution_time:.2f}—Å)")
                raise
        return wrapper
    return decorator

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
(
    MAIN_MENU, INSTRUMENT_TYPE, DIRECTION, 
    RISK_PERCENT, DEPOSIT, LEVERAGE, ENTRY, 
    STOP_LOSS, TAKE_PROFITS, VOLUME_DISTRIBUTION,
    PORTFOLIO_MENU, ADD_TRADE_INSTRUMENT, ADD_TRADE_DIRECTION,
    ADD_TRADE_ENTRY, ADD_TRADE_EXIT, ADD_TRADE_VOLUME,
    DEPOSIT_AMOUNT, WITHDRAW_AMOUNT, SETTINGS_MENU
) = range(19)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å TTL
class OptimizedUserData:
    def __init__(self, ttl=3600):  # 1 —á–∞—Å TTL
        self.data = {}
        self.ttl = ttl
        self.access_times = {}
    
    def get(self, user_id: int):
        if user_id in self.data:
            if time.time() - self.access_times.get(user_id, 0) < self.ttl:
                self.access_times[user_id] = time.time()
                return self.data[user_id]
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                del self.data[user_id]
                del self.access_times[user_id]
        return None
    
    def set(self, user_id: int, value):
        self.data[user_id] = value
        self.access_times[user_id] = time.time()
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if len(self.data) > 1000:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.cleanup()
    
    def cleanup(self):
        current_time = time.time()
        expired_users = [
            user_id for user_id, access_time in self.access_times.items()
            if current_time - access_time > self.ttl
        ]
        for user_id in expired_users:
            del self.data[user_id]
            del self.access_times[user_id]

user_data = OptimizedUserData()

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INSTRUMENT_TYPES = {
    'forex': '–§–æ—Ä–µ–∫—Å',
    'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 
    'indices': '–ò–Ω–¥–µ–∫—Å—ã',
    'commodities': '–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã',
    'metals': '–ú–µ—Ç–∞–ª–ª—ã'
}

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
class OptimizedPortfolioManager:
    @staticmethod
    def initialize_user_portfolio(user_id: int):
        user_data_obj = user_data.get(user_id)
        if not user_data_obj:
            user_data_obj = {}
            user_data.set(user_id, user_data_obj)
        
        if 'portfolio' not in user_data_obj:
            user_data_obj['portfolio'] = {
                'initial_balance': 0.0,
                'current_balance': 0.0,
                'trades': [],
                'performance': {
                    'total_trades': 0,
                    'winning_trades': 0,
                    'losing_trades': 0,
                    'total_profit': 0.0,
                    'total_loss': 0.0,
                    'win_rate': 0.0,
                    'average_profit': 0.0,
                    'average_loss': 0.0,
                    'profit_factor': 0.0,
                    'max_drawdown': 0.0
                },
                'allocation': {},
                'settings': {
                    'default_risk': 0.02,
                    'currency': 'USD',
                    'leverage': '1:100'
                }
            }
    
    @staticmethod
    def add_trade(user_id: int, trade_data: Dict):
        OptimizedPortfolioManager.initialize_user_portfolio(user_id)
        user_data_obj = user_data.get(user_id)
        
        trade_id = len(user_data_obj['portfolio']['trades']) + 1
        trade_data['id'] = trade_id
        trade_data['timestamp'] = datetime.now().isoformat()
        
        user_data_obj['portfolio']['trades'].append(trade_data)
        OptimizedPortfolioManager.update_performance_metrics(user_id)
        
        instrument = trade_data.get('instrument', 'Unknown')
        user_data_obj['portfolio']['allocation'][instrument] = \
            user_data_obj['portfolio']['allocation'].get(instrument, 0) + 1

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
@log_performance(max_time=0.5)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        user = update.effective_user
        if not user:
            return ConversationHandler.END
            
        user_name = user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
        user_id = user.id
        
        # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        OptimizedPortfolioManager.initialize_user_portfolio(user_id)
        
        welcome_text = f"""üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*

üéØ *PRO –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†–∏—Å–∫–∞–º–∏ v4.1*

‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:*"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ. —Ä–∞—Å—á–µ—Ç", callback_data="pro_calculation")],
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="quick_calculation")],
            [InlineKeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
            [InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="pro_info")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        
        if update.message:
            await update.message.reply_text(
                welcome_text, 
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                welcome_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        return ConversationHandler.END

@log_performance(max_time=0.3)
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        await update.message.reply_text(
            "‚ùå *–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n"
            "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        return ConversationHandler.END

@log_performance(max_time=0.5)
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        if not query:
            return MAIN_MENU
            
        await query.answer()
        choice = query.data
        
        user_id = query.from_user.id
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        menu_handlers = {
            "pro_calculation": start_pro_calculation,
            "quick_calculation": start_quick_calculation,
            "portfolio": portfolio_command,
            "pro_info": pro_info_command,
            "settings": settings_command,
            "main_menu": start
        }
        
        handler = menu_handlers.get(choice)
        if handler:
            return await handler(update, context)
        
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_main_menu: {e}")
        return await start(update, context)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@log_performance(max_time=0.4)
async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        OptimizedPortfolioManager.initialize_user_portfolio(user_id)
        
        user_data_obj = user_data.get(user_id)
        current_balance = user_data_obj['portfolio']['current_balance']
        
        portfolio_text = f"""üíº *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ—Ä—Ç—Ñ–µ–ª–µ–º*

üí∞ *–ë–∞–ª–∞–Ω—Å:* ${current_balance:,.2f}
üìä *–°–¥–µ–ª–æ–∫:* {len(user_data_obj['portfolio']['trades'])}

üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"""
        
        keyboard = [
            [InlineKeyboardButton("üìà –û–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫", callback_data="portfolio_trades")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="portfolio_balance")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="portfolio_performance")],
            [InlineKeyboardButton("üìÑ –û—Ç—á–µ—Ç", callback_data="portfolio_report")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if update.message:
            await update.message.reply_text(
                portfolio_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                portfolio_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return PORTFOLIO_MENU
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_command: {e}")
        return await start(update, context)

@log_performance(max_time=0.3)
async def pro_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    try:
        info_text = """üìö *PRO –ò–ù–°–¢–†–£–ö–¶–ò–ò v4.1*

üéØ *–û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:*

‚ö° *–ú–ì–ù–û–í–ï–ù–ù–´–ï –†–ê–°–ß–ï–¢–´:*
‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã

üíº *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–ï–õ–ï–ú:*
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ –∏ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üöÄ *–°–ö–û–†–û –í –û–ë–ù–û–í–õ–ï–ù–ò–ò:*
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ–Ω–ª–∞–π–Ω
‚Ä¢ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üë®‚Äçüíª *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:* @fxfeelgood
*PRO v4.1 | –ë—ã—Å—Ç—Ä–æ ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ* üöÄ"""
        
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        if update.message:
            await update.message.reply_text(
                info_text, 
                parse_mode='Markdown', 
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text(
                info_text,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pro_info_command: {e}")

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@log_performance(max_time=0.3)
async def start_pro_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        await update.callback_query.edit_message_text(
            "üìä *–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢*\n\n"
            "‚ö° *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="quick_calculation")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_pro_calculation: {e}")
        return MAIN_MENU

@log_performance(max_time=0.3)
async def start_quick_calculation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    try:
        await update.callback_query.edit_message_text(
            "‚ö° *–ë–´–°–¢–†–´–ô –†–ê–°–ß–ï–¢*\n\n"
            "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return DEPOSIT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_quick_calculation: {e}")
        return MAIN_MENU

@log_performance(max_time=0.3)
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        user_id = update.effective_user.id
        OptimizedPortfolioManager.initialize_user_portfolio(user_id)
        
        user_data_obj = user_data.get(user_id)
        settings = user_data_obj['portfolio']['settings']
        
        settings_text = f"""‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –†–∏—Å–∫: {settings['default_risk']*100}%
‚Ä¢ –í–∞–ª—é—Ç–∞: {settings['currency']}
‚Ä¢ –ü–ª–µ—á–æ: {settings['leverage']}

üîß *–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*"""
        
        keyboard = [
            [InlineKeyboardButton(f"üí∞ –†–∏—Å–∫: {settings['default_risk']*100}%", callback_data="change_risk")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if update.message:
            await update.message.reply_text(
                settings_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text(
                settings_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return SETTINGS_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ settings_command: {e}")

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
@log_performance(max_time=0.4)
async def portfolio_trades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–¥–µ–ª–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        user_data_obj = user_data.get(user_id)
        trades = user_data_obj['portfolio']['trades']
        
        if not trades:
            await query.edit_message_text(
                "üì≠ *–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç*\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        recent_trades = trades[-3:]
        trades_text = "üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*\n\n"
        
        for trade in reversed(recent_trades):
            profit = trade.get('profit', 0)
            status_emoji = "üü¢" if profit > 0 else "üî¥" if profit < 0 else "‚ö™"
            trades_text += f"{status_emoji} {trade.get('instrument', 'N/A')} | ${profit:.2f}\n"
        
        await query.edit_message_text(
            trades_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="portfolio_add_trade")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ portfolio_trades: {e}")

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–°—É–ø–µ—Ä-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–∏—Å–∫–æ–≤ v4.1...")
    
    # –°–æ–∑–¥–∞–µ–º application —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    application = Application.builder().token(token).build()

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            PORTFOLIO_MENU: [CallbackQueryHandler(handle_main_menu)],
            SETTINGS_MENU: [CallbackQueryHandler(handle_main_menu)],
            DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_deposit_amount)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ],
        allow_reentry=True
    )

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', pro_info_command))
    application.add_handler(CommandHandler('info', pro_info_command))
    application.add_handler(CommandHandler('portfolio', portfolio_command))
    application.add_handler(CallbackQueryHandler(handle_main_menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    port = int(os.environ.get('PORT', 10000))
    webhook_url = os.getenv('RENDER_EXTERNAL_URL', '')
    
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        if webhook_url and "render.com" in webhook_url:
            logger.info("üîó Webhook —Ä–µ–∂–∏–º")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path="/webhook",
                webhook_url=f"{webhook_url}/webhook",
                drop_pending_updates=True  # –í–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–ª–∏–ø–∞–Ω–∏—è
            )
        else:
            logger.info("üîÑ Polling —Ä–µ–∂–∏–º")
            application.run_polling(
                drop_pending_updates=True,  # –û—á–∏—â–∞–µ–º pending updates
                allowed_updates=['message', 'callback_query']  # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

@log_performance(max_time=0.2)
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        await update.message.reply_text(
            "‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*\n\n"
            "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="main_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unknown_command: {e}")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def handle_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    try:
        await update.message.reply_text(
            "üí∞ *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞—Å—á–µ—Ç–æ–≤.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_deposit_amount: {e}")
        return ConversationHandler.END

async def portfolio_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
    await update.callback_query.edit_message_text(
        "üí∞ *–ë–∞–ª–∞–Ω—Å*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
        ])
    )

async def portfolio_performance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await update.callback_query.edit_message_text(
        "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
        ])
    )

async def portfolio_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    await update.callback_query.edit_message_text(
        "üìÑ *–û—Ç—á–µ—Ç*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
        ])
    )

async def portfolio_add_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    await update.callback_query.edit_message_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="portfolio")]
        ])
    )

async def change_risk_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞"""
    await update.callback_query.edit_message_text(
        "üéØ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫–∞*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]
        ])
    )

if __name__ == '__main__':
    main()
