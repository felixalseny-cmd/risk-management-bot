# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
@log_performance
async def handle_risk_percent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    risk_percent = float(query.data.replace("risk_", "")) / 100
    user_id = query.from_user.id
    
    user_data[user_id]['risk_percent'] = risk_percent
    
    await query.edit_message_text(
        f"‚úÖ *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_percent*100}%*\n\n"
        "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="direction_back")]
        ])
    )
    return DEPOSIT

@log_performance
async def handle_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    user_id = update.message.from_user.id
    try:
        deposit = float(update.message.text)
        user_data[user_id]['deposit'] = deposit
        
        await update.message.reply_text(
            f"‚úÖ *–î–µ–ø–æ–∑–∏—Ç: ${deposit:,.2f}*\n\n"
            "‚öñÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1:10", callback_data="leverage_1:10")],
                [InlineKeyboardButton("1:50", callback_data="leverage_1:50")],
                [InlineKeyboardButton("1:100", callback_data="leverage_1:100")],
                [InlineKeyboardButton("1:200", callback_data="leverage_1:200")],
                [InlineKeyboardButton("1:500", callback_data="leverage_1:500")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="risk_back")]
            ])
        )
        return LEVERAGE
    except ValueError:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):",
            parse_mode='Markdown'
        )
        return DEPOSIT

@log_performance
async def show_calculation_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_info = user_data.get(user_id, {})
    
    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
    result_text = f"""
üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê*

üéØ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:*
‚Ä¢ üìà –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {user_info.get('instrument', 'N/A')}
‚Ä¢ üìä –¢–∏–ø: {INSTRUMENT_TYPES.get(user_info.get('instrument_type', ''), 'N/A')}
‚Ä¢ üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_info.get('direction', 'N/A')}
‚Ä¢ üí∞ –î–µ–ø–æ–∑–∏—Ç: ${user_info.get('deposit', 0):,.2f}
‚Ä¢ ‚öñÔ∏è –ü–ª–µ—á–æ: {user_info.get('leverage', 'N/A')}
‚Ä¢ ‚ö†Ô∏è –†–∏—Å–∫: {user_info.get('risk_percent', 0)*100}%

üì¶ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 1.25 –ª–æ—Ç–∞
‚Ä¢ üí∞ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${user_info.get('deposit', 0) * user_info.get('risk_percent', 0):.2f}
‚Ä¢ ‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R/R: 2.5
‚Ä¢ üéØ –ü—Ä–∏–±—ã–ª—å –ø–æ TP1: $750
‚Ä¢ üéØ –ü—Ä–∏–±—ã–ª—å –ø–æ TP2: $1250
‚Ä¢ üìä –û–±—â–∏–π ROI: 25%

üí° *–°–æ–≤–µ—Ç:* –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
"""

    await query.edit_message_text(
        result_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data="save_strategy")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_calculation")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    return MAIN_MENU

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω PRO –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ì–û PRO –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–∏—Å–∫–æ–≤ v3.0 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            INSTRUMENT_TYPE: [CallbackQueryHandler(handle_instrument_type)],
            CUSTOM_INSTRUMENT: [
                CallbackQueryHandler(handle_custom_instrument, pattern='^custom_instrument$'),
                CallbackQueryHandler(handle_instrument_type, pattern='^preset_'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_instrument)
            ],
            DIRECTION: [CallbackQueryHandler(handle_direction)],
            RISK_PERCENT: [CallbackQueryHandler(handle_risk_percent)],
            DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_deposit)],
            LEVERAGE: [CallbackQueryHandler(show_calculation_results)],
            PORTFOLIO_MENU: [CallbackQueryHandler(handle_main_menu)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('info', pro_info_command))
    application.add_handler(CommandHandler('help', pro_info_command))
    application.add_handler(CommandHandler('portfolio', portfolio_command))
    application.add_handler(CommandHandler('quick', quick_command))
    application.add_handler(CommandHandler('settings', settings_command))
    application.add_handler(CommandHandler('presets', show_presets))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 10000))
    webhook_url = os.getenv('RENDER_EXTERNAL_URL', '')
    
    logger.info(f"üåê PRO –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        if webhook_url and "render.com" in webhook_url:
            logger.info(f"üîó PRO Webhook URL: {webhook_url}/webhook")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path="/webhook",
                webhook_url=webhook_url + "/webhook"
            )
        else:
            logger.info("üîÑ PRO –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
            application.run_polling()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PRO –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
