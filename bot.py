import os
import logging
import asyncio
import re
import time
import functools
from datetime import datetime
from typing import Dict, List, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
MAIN_MENU, QUICK_PARAMS, PRO_PARAMS, CALCULATION, RESULTS = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
calculation_cache = {}

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
class SimpleRiskCalculator:
    @staticmethod
    def calculate_fast(deposit: float, risk_percent: float, entry: float, stop_loss: float, instrument_type: str = "forex") -> Dict:
        """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        cache_key = f"{deposit}_{risk_percent}_{entry}_{stop_loss}_{instrument_type}"
        
        if cache_key in calculation_cache:
            return calculation_cache[cache_key]
        
        risk_amount = deposit * risk_percent
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if instrument_type == "crypto":
            multiplier = 100
        elif instrument_type == "indices":
            multiplier = 1
        else:
            multiplier = 10000
            
        price_diff = abs(entry - stop_loss)
        if price_diff == 0:
            position_size = 0.01
        else:
            position_size = (risk_amount / (price_diff * multiplier)) * 100
            position_size = min(max(round(position_size, 2), 0.01), 50.0)
        
        result = {
            'position_size': position_size,
            'risk_amount': risk_amount,
            'risk_percent': risk_percent * 100,
            'stop_pips': price_diff * multiplier
        }
        
        calculation_cache[cache_key] = result
        return result

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user if update.message else update.callback_query.from_user
    
    welcome_text = f"""
üéØ *–£–º–Ω—ã–π –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –†–∏—Å–∫–æ–≤*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.

‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:*
"""

    keyboard = [
        [InlineKeyboardButton("üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="instant_mode")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_mode")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="help")]
    ]
    
    if update.message:
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.edit_message_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return MAIN_MENU

# –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥
async def instant_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†–µ–∂–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    help_text = """
üöÄ *–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –†–∞—Å—á–µ—Ç*

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –û–î–ù–û–ô —Å—Ç—Ä–æ–∫–µ:

`–¥–µ–ø–æ–∑–∏—Ç —Ä–∏—Å–∫% –≤—Ö–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å`

*–ü—Ä–∏–º–µ—Ä:*
`1000 2 1.0850 1.0800`

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞:
"""

    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥", callback_data="step_by_step")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )
    return QUICK_PARAMS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
async def process_instant_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not update.message:
        return QUICK_PARAMS
        
    text = update.message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        parts = text.split()
        if len(parts) == 4:
            deposit, risk_percent, entry, stop_loss = map(float, parts)
            risk_percent /= 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
            
            # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç
            result = SimpleRiskCalculator.calculate_fast(deposit, risk_percent, entry, stop_loss)
            
            await show_simple_result(update, context, deposit, risk_percent, entry, stop_loss, result)
            return MAIN_MENU
            
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
    except ValueError as e:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–¥–µ–ø–æ–∑–∏—Ç —Ä–∏—Å–∫% –≤—Ö–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å`\n\n"
            "*–ü—Ä–∏–º–µ—Ä:* `1000 2 1.0850 1.0800`",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instant_mode")]])
        )
        return QUICK_PARAMS

# –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
async def step_by_step_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['step'] = 'deposit'
    
    await query.edit_message_text(
        "üíµ *–®–∞–≥ 1 –∏–∑ 4*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USD:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instant_mode")]])
    )
    return QUICK_PARAMS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
async def process_step_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not update.message:
        return QUICK_PARAMS
        
    user_data = context.user_data
    step = user_data.get('step', 'deposit')
    text = update.message.text
    
    try:
        if step == 'deposit':
            deposit = float(text)
            if deposit <= 0:
                await update.message.reply_text("‚ùå –î–µ–ø–æ–∑–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º:")
                return QUICK_PARAMS
                
            user_data['deposit'] = deposit
            user_data['step'] = 'risk'
            
            await update.message.reply_text(
                "‚öñÔ∏è *–®–∞–≥ 2 –∏–∑ 4*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –≤ %:\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –¥–ª—è 2%)",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="step_by_step")]])
            )
            
        elif step == 'risk':
            risk_percent = float(text) / 100
            user_data['risk_percent'] = risk_percent
            user_data['step'] = 'entry'
            
            await update.message.reply_text(
                "üìà *–®–∞–≥ 3 –∏–∑ 4*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞:",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="step_by_step")]])
            )
            
        elif step == 'entry':
            entry = float(text)
            user_data['entry'] = entry
            user_data['step'] = 'stop_loss'
            
            await update.message.reply_text(
                "üõë *–®–∞–≥ 4 –∏–∑ 4*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å:",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="step_by_step")]])
            )
            
        elif step == 'stop_loss':
            stop_loss = float(text)
            deposit = user_data['deposit']
            risk_percent = user_data['risk_percent']
            entry = user_data['entry']
            
            # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç
            result = SimpleRiskCalculator.calculate_fast(deposit, risk_percent, entry, stop_loss)
            
            await show_simple_result(update, context, deposit, risk_percent, entry, stop_loss, result)
            return MAIN_MENU
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="step_by_step")]])
        )
        return QUICK_PARAMS
    
    return QUICK_PARAMS

# –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def show_simple_result(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           deposit: float, risk_percent: float, entry: float, stop_loss: float, result: Dict):
    """–ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    message = f"""
üéØ *–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê*

*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
üíµ –î–µ–ø–æ–∑–∏—Ç: ${deposit:,.2f}
‚öñÔ∏è –†–∏—Å–∫: {risk_percent*100}% (${result['risk_amount']:.2f})
üìà –í—Ö–æ–¥: {entry}
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
üì¶ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: *{result['position_size']:.2f} –ª–æ—Ç–∞*
üí∞ –°—É–º–º–∞ —Ä–∏—Å–∫–∞: ${result['risk_amount']:.2f}
üìä –°—Ç–æ–ø-–ª–æ—Å—Å: {result['stop_pips']:.0f} –ø—É–Ω–∫—Ç–æ–≤

üí° *–°–æ–≤–µ—Ç:* –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏!
"""

    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="instant_mode")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="pro_mode")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    if update.message:
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
async def pro_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"""
    query = update.callback_query
    await query.answer()
    
    help_text = """
üìä *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –†–µ–∂–∏–º*

–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (EURUSD, BTCUSD –∏ —Ç.–¥.)
‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ
‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:
"""

    keyboard = [
        [InlineKeyboardButton("üåê –§–æ—Ä–µ–∫—Å", callback_data="pro_forex")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ", callback_data="pro_crypto")],
        [InlineKeyboardButton("üìà –ò–Ω–¥–µ–∫—Å—ã", callback_data="pro_indices")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PRO_PARAMS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    
    if choice == "instant_mode":
        return await instant_mode(update, context)
    elif choice == "pro_mode":
        return await pro_mode(update, context)
    elif choice == "step_by_step":
        return await step_by_step_input(update, context)
    elif choice == "main_menu":
        return await start(update, context)
    elif choice == "help":
        await show_help(update, context)
        return MAIN_MENU
    
    return MAIN_MENU

# –ü—Ä–æ—Å—Ç–∞—è –ø–æ–º–æ—â—å
async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """
‚ùì *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*

üöÄ *–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:*
–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ: `–¥–µ–ø–æ–∑–∏—Ç —Ä–∏—Å–∫% –≤—Ö–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å`
–ü—Ä–∏–º–µ—Ä: `1000 2 1.0850 1.0800`

üìä *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:*
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–ª–µ—á–æ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1-3% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
‚Ä¢ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—Ä–∞–Ω–µ–µ

–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start
"""

    query = update.callback_query
    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_buttons, pattern='^(instant_mode|pro_mode|help|main_menu)$')],
            QUICK_PARAMS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_instant_input),
                CallbackQueryHandler(handle_buttons, pattern='^(instant_mode|step_by_step|main_menu)$')
            ],
            PRO_PARAMS: [
                CallbackQueryHandler(handle_buttons, pattern='^(pro_forex|pro_crypto|pro_indices|main_menu)$')
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    port = int(os.environ.get('PORT', 10000))
    webhook_url = os.getenv('RENDER_EXTERNAL_URL', '')
    
    try:
        if webhook_url and "render.com" in webhook_url:
            logger.info(f"üîó Webhook URL: {webhook_url}/webhook")
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path="/webhook",
                webhook_url=webhook_url + "/webhook"
            )
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
            application.run_polling()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
